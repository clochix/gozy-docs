{
    "docs": [
        {
            "location": "/", 
            "text": "Cozy Documentation\nThe go-to website about Cozy configuration and setup.\n\n\n\n    \n\n      \n\n      \nLearn how to use your server\n\n    \n\n  \n\n\n\n    \n\n      \n\n      \nKeep your devices in sync\n\n    \n\n  \n\n\n\n    \n\n      \n\n      \nInstall your own server\n\n    \n\n  \n\n\n\n    \n\n      \n\n      \nDevelop applications\n\n      Learn how to develop applications and connectors.\n    \n\n  \n\n\n\n\nGet in touch\nIf you have any questions, you can contact us via these 3 medias:\n\n\nwrite an email to our Support team: contact at cozy.io;\npost on the forum\n;\nchat with us on IRC\n;", 
            "title": "Home"
        }, 
        {
            "location": "/#cozy-documentation", 
            "text": "The go-to website about Cozy configuration and setup.  \n     \n       \n       Learn how to use your server \n     \n    \n     \n       \n       Keep your devices in sync \n     \n    \n     \n       \n       Install your own server \n     \n    \n     \n       \n       Develop applications \n      Learn how to develop applications and connectors.", 
            "title": "Cozy Documentation"
        }, 
        {
            "location": "/#get-in-touch", 
            "text": "If you have any questions, you can contact us via these 3 medias:  write an email to our Support team: contact at cozy.io; post on the forum ; chat with us on IRC ;", 
            "title": "Get in touch"
        }, 
        {
            "location": "/use/", 
            "text": "Welcome to your new home\nHello, I\u2019m Claude, Cozy support team member. Let me introduce you to your new home in the cloud.\nOur charter\nBefore starting the visit, I\u2019d like to tell you a few words about our values. Our priority is to help you take back the control on your data, by importing them into a safe place, a place that you\u2019re the only one to have access.\nIn your personal cloud, you\u2019re at home\nBy default, you are the only one that can access your data. (\u2026)\nYour data belongs to you\nYour are the one and only owner of the data stored on your cloud.\nOpenness brings confidence\nCozy is and will stay a service built on free software: you can use, copy, improve the source code.\nYou decide how your data can be used\nYour Cozy server allows to control the data that you share with third party.\nCreate your home in the cloud\nYour home has an address. Your home in the cloud also has an address. Let\u2019s choose it!\n\n\nClaude\u2019s tip\nCreating a good password may be hard.\n\n\nYour toolbox\nSave all your files and documents in just a click\nAccess your files wherever your are, whenever you want\nConnect to deconnect\nChecklist\nHave you installed the Cozy application on your phone?\nHave you installed the Cozy application on your computers?\nAny question?\nOne last surprise", 
            "title": "User guide"
        }, 
        {
            "location": "/use/#welcome-to-your-new-home", 
            "text": "Hello, I\u2019m Claude, Cozy support team member. Let me introduce you to your new home in the cloud.", 
            "title": "Welcome to your new home"
        }, 
        {
            "location": "/use/#our-charter", 
            "text": "Before starting the visit, I\u2019d like to tell you a few words about our values. Our priority is to help you take back the control on your data, by importing them into a safe place, a place that you\u2019re the only one to have access.", 
            "title": "Our charter"
        }, 
        {
            "location": "/use/#in-your-personal-cloud-youre-at-home", 
            "text": "By default, you are the only one that can access your data. (\u2026)", 
            "title": "In your personal cloud, you\u2019re at home"
        }, 
        {
            "location": "/use/#your-data-belongs-to-you", 
            "text": "Your are the one and only owner of the data stored on your cloud.", 
            "title": "Your data belongs to you"
        }, 
        {
            "location": "/use/#openness-brings-confidence", 
            "text": "Cozy is and will stay a service built on free software: you can use, copy, improve the source code.", 
            "title": "Openness brings confidence"
        }, 
        {
            "location": "/use/#you-decide-how-your-data-can-be-used", 
            "text": "Your Cozy server allows to control the data that you share with third party.", 
            "title": "You decide how your data can be used"
        }, 
        {
            "location": "/use/#create-your-home-in-the-cloud", 
            "text": "Your home has an address. Your home in the cloud also has an address. Let\u2019s choose it!  Claude\u2019s tip Creating a good password may be hard.", 
            "title": "Create your home in the cloud"
        }, 
        {
            "location": "/use/#your-toolbox", 
            "text": "", 
            "title": "Your toolbox"
        }, 
        {
            "location": "/use/#save-all-your-files-and-documents-in-just-a-click", 
            "text": "", 
            "title": "Save all your files and documents in just a click"
        }, 
        {
            "location": "/use/#access-your-files-wherever-your-are-whenever-you-want", 
            "text": "", 
            "title": "Access your files wherever your are, whenever you want"
        }, 
        {
            "location": "/use/#connect-to-deconnect", 
            "text": "", 
            "title": "Connect to deconnect"
        }, 
        {
            "location": "/use/#checklist", 
            "text": "", 
            "title": "Checklist"
        }, 
        {
            "location": "/use/#have-you-installed-the-cozy-application-on-your-phone", 
            "text": "", 
            "title": "Have you installed the Cozy application on your phone?"
        }, 
        {
            "location": "/use/#have-you-installed-the-cozy-application-on-your-computers", 
            "text": "", 
            "title": "Have you installed the Cozy application on your computers?"
        }, 
        {
            "location": "/use/#any-question", 
            "text": "", 
            "title": "Any question?"
        }, 
        {
            "location": "/use/#one-last-surprise", 
            "text": "", 
            "title": "One last surprise"
        }, 
        {
            "location": "/sync/", 
            "text": "Sync all your devices with your server\nComing soon\n\n\nsynchronize your phone\n;\nsynchronize your desktop computer\n;", 
            "title": "Stay in sync"
        }, 
        {
            "location": "/sync/#sync-all-your-devices-with-your-server", 
            "text": "Coming soon  synchronize your phone ; synchronize your desktop computer ;", 
            "title": "Sync all your devices with your server"
        }, 
        {
            "location": "/sync/phone/", 
            "text": "Sync your phone with your server\nComing soon!", 
            "title": "Synchronize your phone"
        }, 
        {
            "location": "/sync/phone/#sync-your-phone-with-your-server", 
            "text": "Coming soon!", 
            "title": "Sync your phone with your server"
        }, 
        {
            "location": "/sync/desktop/", 
            "text": "Sync your desktop computer with your server\nCozy Drive for desktop allows you to synchronize your files and folders between your Cozy and your desktop. Thus, you can work on your files offline. Your modifications will be synchronized as soon as network will be available.\nInstallation\nBefore installing Cozy Drive, make sure your Cozy should be up-to-date.\nWindows\nYou can download Cozy Drive for Windows on \nthis page\n.\nmacOS\nYou can download Cozy Drive for macOS on \nthis page\n.\nLinux\nComing soon\u2026 :)\nConfiguration\nAt the end of the installation, application will start and ask you for a few informations:\n\n\nYour Cozy URL. In other words, the address used to access to your Cozy.\nYour Cozy password. We don\u2019t save your password, we only use it to create a new device login which it uses to synchronize your files.\nThe folder where you want to synchronize your files.\n\n\nOnce done, you will be redirected to the dashboard. First synchronization can now start.\nThe dashboard is composed of :\n\n\nAn information panel about synchronizations and available disk space on your Cozy.\nA settings panel to configure autostart.\nAn account panel with information on your Cozy and possibility to unlink your Cozy.\nA help panel in case of problem\n\n\nTroubleshooting\nWhen you hit a problem with the application, you can send us a message with the application logs, so we can try to understand and fix the problem.\nOpen help panel, then click on \nSend us a message\n in \n\nOfficial support\n.\nDon\u2019t forget to describe your problem by adding as many details as you can.", 
            "title": "Synchronize your computer"
        }, 
        {
            "location": "/sync/desktop/#sync-your-desktop-computer-with-your-server", 
            "text": "Cozy Drive for desktop allows you to synchronize your files and folders between your Cozy and your desktop. Thus, you can work on your files offline. Your modifications will be synchronized as soon as network will be available.", 
            "title": "Sync your desktop computer with your server"
        }, 
        {
            "location": "/sync/desktop/#installation", 
            "text": "Before installing Cozy Drive, make sure your Cozy should be up-to-date.", 
            "title": "Installation"
        }, 
        {
            "location": "/sync/desktop/#windows", 
            "text": "You can download Cozy Drive for Windows on  this page .", 
            "title": "Windows"
        }, 
        {
            "location": "/sync/desktop/#macos", 
            "text": "You can download Cozy Drive for macOS on  this page .", 
            "title": "macOS"
        }, 
        {
            "location": "/sync/desktop/#linux", 
            "text": "Coming soon\u2026 :)", 
            "title": "Linux"
        }, 
        {
            "location": "/sync/desktop/#configuration", 
            "text": "At the end of the installation, application will start and ask you for a few informations:  Your Cozy URL. In other words, the address used to access to your Cozy. Your Cozy password. We don\u2019t save your password, we only use it to create a new device login which it uses to synchronize your files. The folder where you want to synchronize your files.  Once done, you will be redirected to the dashboard. First synchronization can now start. The dashboard is composed of :  An information panel about synchronizations and available disk space on your Cozy. A settings panel to configure autostart. An account panel with information on your Cozy and possibility to unlink your Cozy. A help panel in case of problem", 
            "title": "Configuration"
        }, 
        {
            "location": "/sync/desktop/#troubleshooting", 
            "text": "When you hit a problem with the application, you can send us a message with the application logs, so we can try to understand and fix the problem. Open help panel, then click on  Send us a message  in  Official support . Don\u2019t forget to describe your problem by adding as many details as you can.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/download/", 
            "text": "Download Cozy Drive for all your devices\nCozy Drive on your phone\n\n\n Cozy Drive for iOS\nRequires iOS 10\n\n\n\n\n Cozy Drive for Android\nRequires Android 5.0.0\n\n\nCozy Drive on your computer\n\n\n Cozy Drive for Mac OS\nRequires MacOS 10.12.x Sierra\n\n\nDowload for MacOS\n\n\n\n\n\n\n Cozy Drive for Windows\nRequire Windows 10\n\n\nDowload for Microsoft Windows", 
            "title": "Download"
        }, 
        {
            "location": "/download/#download-cozy-drive-for-all-your-devices", 
            "text": "", 
            "title": "Download Cozy Drive for all your devices"
        }, 
        {
            "location": "/download/#cozy-drive-on-your-phone", 
            "text": "", 
            "title": "Cozy Drive on your phone"
        }, 
        {
            "location": "/download/#cozy-drive-for-ios", 
            "text": "Requires iOS 10", 
            "title": "Cozy Drive for iOS"
        }, 
        {
            "location": "/download/#cozy-drive-for-android", 
            "text": "Requires Android 5.0.0", 
            "title": "Cozy Drive for Android"
        }, 
        {
            "location": "/download/#cozy-drive-on-your-computer", 
            "text": "", 
            "title": "Cozy Drive on your computer"
        }, 
        {
            "location": "/download/#cozy-drive-for-mac-os", 
            "text": "Requires MacOS 10.12.x Sierra  Dowload for MacOS", 
            "title": "Cozy Drive for Mac OS"
        }, 
        {
            "location": "/download/#cozy-drive-for-windows", 
            "text": "Require Windows 10  Dowload for Microsoft Windows", 
            "title": "Cozy Drive for Windows"
        }, 
        {
            "location": "/install/", 
            "text": "Install Cozy on your own server\nThis documentation is in its early stage of writing.\nFor now, we\u2019ll only explain how to \ninstall Cozy by hand\n. This is neither the easiest path to follow, nor the recommended one. It requires to have some knowledge of the command line.\nIn the near future, we\u2019ll provide packages and images to make hosting Cozy easier.", 
            "title": "Install Cozy on your own server"
        }, 
        {
            "location": "/install/#install-cozy-on-your-own-server", 
            "text": "This documentation is in its early stage of writing. For now, we\u2019ll only explain how to  install Cozy by hand . This is neither the easiest path to follow, nor the recommended one. It requires to have some knowledge of the command line. In the near future, we\u2019ll provide packages and images to make hosting Cozy easier.", 
            "title": "Install Cozy on your own server"
        }, 
        {
            "location": "/install/manual/", 
            "text": "How to install Cozy on Debian Stable\n\n\n\u26a0\ufe0f This is a work in progress. For now, there\u2019s no easy and officially supported way to install Cozy. You have to install it and all this dependencies by hand. This tutorial is intended for tech savvy people wanting to give Cozy a first try without waiting for the official documentation and images.\n\n\n\n\nFor now, this documentation don\u2019t explain how to install the technology stack required for connector, as the technology we use may evolve. So you won\u2019t be able to run the connectors.\n\n\n\n\nMost of the following commands require root privileges. You can either open a root shell or use \nsudo\n when needed;\n\n\nPre-requisites\nCozy requires a CouchDB 2 database server, a reverse proxy and an SMTP server. We\u2019ll use Nginx in this tutorial but feel free to use your reverse proxy of choice.\nYou\nll also need a domain name and know how to associate all of its subdomains to the IP address of your server.\nInstall CouchDB\nDebian 8\nCouchDB now has an official package repository, so you just need:\ncurl -L https://couchdb.apache.org/repo/bintray-pubkey.asc | sudo apt-key add -\necho \ndeb https://apache.bintray.com/couchdb-deb jessie main\n | sudo tee -a /etc/apt/sources.list.d/couchdb.list\nsudo apt-get update \n sudo apt-get install couchdb\n\n\n\n\nDebian 9\nWaiting for the package repository to support Debian Stretch, you can still build CouchDB 2.1.0 \nby yourself\n.\nInstall the Cozy Stack\nAlready compiled\nThe Cozy server is just a single binary. You can fetch one of its releases from Github:\ncurl -o /usr/local/bin/cozy-stack \\\n     -L https://github.com/cozy/cozy-stack/releases/download/2017M2-alpha/cozy-stack-linux-amd64-2017M2-alpha\nchmod +x /usr/local/bin/cozy-stack\nadduser --system \\\n        --no-create-home \\\n        --shell /bin/bash \\\n        --group --gecos \\\n          \nCozy\n cozy\nmkdir /var/log/cozy\nchown cozy: /var/log/cozy\nmkdir /var/lib/cozy\nchown -R cozy: /var/lib/cozy\n\n\n\n\nYou can configure your server using a JSON or YAML file. Let\u2019s fetch the sample configuration file:\nmkdir /etc/cozy\ncurl -o /etc/cozy/cozy.yaml \\\n     https://raw.githubusercontent.com/cozy/cozy-stack/master/cozy.example.yaml\nchown -R cozy: /etc/cozy\n\n\n\n\nEdit this file to adapt it to your configuration. You should setup a directory to store the files. For example:\n  fs:\n    url: file://localhost/var/lib/cozy\n\n\n\n\nDon\u2019t forget to allow Cozy user to write inside this folder.\nCompile a recent stack\nThe released build may not contain the latest fixes. If you want an up to date version of the stack, you can compile it from the sources. This requires to install the Go compiler, fetch the sources and compile them:\napt-get --no-install-recommends -y install \\\n        ca-certificates \\\n        curl \\\n        net-tools \\\n        nginx \\\n        sudo \\\n        vim-tiny \\\n        build-essential \\\n        pkg-config \\\n        erlang \\\n        libicu-dev \\\n        libmozjs185-dev \\\n        libcurl4-openssl-dev \\\n        git\ncd /tmp\ncurl -LO https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz\ntar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz\nPATH=$PATH:/usr/local/go/bin go get -u github.com/cozy/cozy-stack\ncp /root/go/bin/cozy-stack /usr/local/bin/cozy-stack\nchmod +x /usr/local/bin/cozy-stack\n\n\n\n\nConfiguration\nCozy\nThe Cozy server requires a main password:\nsudo /usr/local/bin/cozy-stack config passwd /etc/cozy/\n\n\n\n\nThis password will be asked every time you use the \ncozy-stack\n command line. To prevent this, you can set the \n\nCOZY_ADMIN_PASSWORD\n environment variable.\nNGinx and self-signed certificates\nLet\u2019s assume you want to host a server on \nmycozy.tld\n with a self-signed certificate.\nGenerate the certificate. We need a wild-card certificate, as every application inside Cozy will have it\u2019s own sub-domain:\nsudo openssl req -x509 -nodes -newkey rsa:4096 \\\n    -keyout /etc/cozy/mycozy.tld.key \\\n    -out /etc/cozy/mycozy.tld.crt \\\n    -days 365 -subj \n/CN={*.mycozy.tld}\n\n\n\n\nThen create a virtual host for your server by creating a file at \n/etc/cozy/sites-available/mycozy.tld.conf\n with the following configuration template.\n=====\nThen create a virtual host for your server by creating \n/etc/nginx/sites-available/mycozy.tld\n and enable it by creating a symbolic link:\nsudo ln -s \n/etc/nginx/sites-available/mycozy.tld.conf\n \\\n       /etc/nginx/sites-enabled/\n\n\n\n\nYou can check that your configuration is valid by running\nsudo nginx -t -c /etc/nginx/nginx.conf\n\n\n\n\nAnd start NGinx:\nsudo service nginx start\n\n\n\n\nOr, if you use systemd:\nsudo systemctl start nginx\nsudo systemctl enable nginx # enable the nginx service at startup, if need to\n\n\n\n\nSample configuration files\nPut this file into \n/etc/nginx/sites-available\n and enable it by creating a symlink in \n\n/etc/nginx/sites-enabled\n.\nIn this template, you need to replace the following placeholders:\n  - %PORT% with the public port nginx will listen to (default should be 443);\n  - %SERVER_PORT% with the private port cozy will listen to (default should be 8080);\n  - %DOMAIN% with your domain of choice: \nmycozy.tld\n in this example\nserver {\n    listen %PORT%;\n\n    server_name *.%DOMAIN%;\n\n    ssl_certificate /etc/cozy/%DOMAIN%.crt;\n    ssl_certificate_key /etc/cozy/%DOMAIN%.key;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers EECDH+AES;\n    ssl_prefer_server_ciphers on;\n    ssl on;\n\n    gzip_vary on;\n    client_max_body_size 1024M;\n\n    add_header Strict-Transport-Security max-age=31536000;\n\n    location / {\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_redirect http:// https://;\n        proxy_pass http://127.0.0.1:8080;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \nupgrade\n;\n    }\n\n    access_log /var/log/nginx/cozy.log;\n}\n\n\n\n\nApache and Let\ns Encrypt certificates\nCozy is leveraging subdomains, one way (\napp.user.domain.tld\n) or the other (\n\napp-user.domain.tld\n). While your DNS and your Apache Virtual Hosts can easily be wildcarded, Let\ns Encrypt certificates don\nt (at least until January 2018). But they can contain multiple domains, and that\ns what you can leverage:\n\n\nFirst you need to define a virtual host for you Cozy instance:\n\n\n/etc/apache2/sites-available/mycozy.tld.conf\n:\nVirtualHost *:443\n\n    ServerName mycozy.tld\n    ServerAlias *.mycozy.tld\n\n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / mycozy.tld\n    ProxyPreserveHost on\n\n    ErrorLog ${APACHE_LOG_DIR}/error_cozy.log\n    CustomLog ${APACHE_LOG_DIR}/access_cozy.log combined\n\n/VirtualHost\n\n\n\n\nsudo a2ensite mycozy.tld.conf\nsudo service apache2 reload\n\n\n\n\nNote that this virtual host is listening on port 443, yet it doesn\nt enable \nSSLEngine\n. It\ns because Certbot needs this virtual host to perform TLS-DNI domain validation challenge to be able to generate your TLS certificate (more details \n\nhere\n ).\n\n\nNow you can generate Let\ns Encrypt certificates, using \nCertbot\n:\n\n\nsudo certbot certonly --apache --domains mycozy.tld,drive.mycozy.tld,photos.mycozy.tld,settings.mycozy.tld\n\n\n\n\nThis will generate 1 certificate containing multiple sub-domains. It is installed in \n/etc/letsencrypt/live/mycozy.tld\n.\n\n\nSo the final step is to enable SSL/TLS in your virtual host:\n\n\n/etc/apache2/sites-available/mycozy.tld\n:\n    ...\n    SSLEngine on\n    Header always set Strict-Transport-Security \nmax-age=31536000; includeSubDomains\n\n    SSLCertificateFile \n/etc/letsencrypt/live/mycozy.tld/fullchain.pem\n\n    SSLCertificateKeyFile \n/etc/letsencrypt/live/mycozy.tld/privkey.pem\n\n    ...\n\n\n\n\nsudo service apache2 reload\n\n\n\n\nAutomation for multiple instances\nYou can make all this automated in 2 simple steps:\n\n\nDefine a virtual host template:\n\n\n#\nVirtualHost *:80\n\n#    ServerName __DOMAIN__\n#    ServerAlias *.__DOMAIN__\n#\n#    # Force SSL\n#    Redirect permanent / \nhttps://%{HTTP_HOST}\n\n#\n/VirtualHost\n\n\n\nVirtualHost *:443\n\n    ServerName __DOMAIN__\n    ServerAlias *.__DOMAIN__\n\n#    SSLEngine on\n#    Header always set Strict-Transport-Security \nmax-age=31536000; includeSubDomains\n\n#    SSLCertificateFile \n/etc/letsencrypt/live/__DOMAIN__/fullchain.pem\n\n#    SSLCertificateKeyFile \n/etc/letsencrypt/live/__DOMAIN__/privkey.pem\n\n\n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / __DOMAIN__\n    ProxyPreserveHost on\n\n    ErrorLog ${APACHE_LOG_DIR}/error___DOMAIN__.log\n    CustomLog ${APACHE_LOG_DIR}/access___DOMAIN__.log combined\n\n/VirtualHost\n\n\n\n\n\n\nThen define this script, that will take care of creating Cozy instance as well as Apache/Let\ns Encrypt stuff:\n\n\n#!/bin/bash\n\ndomain=$1\napps=$2\nvhost=\n$domain.conf\n\nvhost_file=\n/etc/apache2/sites-available/$vhost\n\n\npassphrase=`openssl rand -base64 12 | head -c -3`\necho \nAdding Cozy instance with passphase $passphrase\n\nsudo -u cozy cozy-stack instances add --host 0.0.0.0 --apps $apps --passphrase $passphrase $domain\n\n\ndomains=\n$domain\n\n\nIFS=',' read -ra apps_array \n \n$apps\n\nfor app in \n${apps_array[@]}\n; do\n    domains=\n$domains,$app.$domain\n\ndone\n\necho \nCreating Apache virtual host for Certbot to be able to use TLS-SNI challenge\n\nsed \ns/__DOMAIN__/$domain/g\n cozy_vhost.conf | sudo tee $vhost_file \n /dev/null\n\nsudo a2ensite $vhost\nsudo service apache2 reload\n\necho \nGetting Let's Encrypt certificate for $domains\n\nsudo certbot certonly --apache --non-interactive --force-renewal --quiet --domains $domains\n\necho \nEnabling Let's Encrypt certificate, reloading Apache\n\nsudo sed -i 's/^#//g' $vhost_file\nsudo service apache2 reload\n\n\n\n\n\n\nYou can use this script this way:\n\n\n./cozy_add_instance.sh alice.mycozy.tld drive,photos,collect,settings\n./cozy_add_instance.sh bob.mycozy.tld drive,photos,collect,settings\n\n\n\n\nDNS\nMake sure to associate \n*.mycozy.tld\n with the IP address of your server.\nFor example, add the following records to your DNS (replacing \nmycozy.tld\n with your domain of choice):\nmycozy.tld   A     your IP\n*.mycozy.tld CNAME mycozy.tld\n\n\n\n\nRunning\nFor now, we\u2019ll just run the server as a background job, but it is highly recommended to use some supervisor software.\nFirst, start the server:\nsudo -b -u cozy sh -c '/usr/local/bin/cozy-stack serve \\\n     --log-level info \\\n     --host 0.0.0.0 \n /var/log/cozy/cozy.log 2\n /var/log/cozy/cozy-err.log'\n\n\n\n\nThen, create your instance and install the applications:\ncozy-stack instances add \\\n           --host 0.0.0.0 \\\n           --apps drive,photos,collect,settings \\\n           --passphrase \nXXX\n \\\n           mycozy.tld\n\n\n\n\npassphrase \nXXX\n allows to set the initial password of the instance.\nYou can add other instances by just running this commands again.\n\n\nThe url of your cozy determines the name of your instance.\nIf you choose another public port than the default public port for SSL (443), say \n1443\n, then you should reflect this when creating your cozy instance with the ${instance_domain} as \n\nmycozy.tld:1443\n.\n\n\nTODO\nCozy also requires a SMTP server (or relay).", 
            "title": "Manual installation"
        }, 
        {
            "location": "/install/manual/#how-to-install-cozy-on-debian-stable", 
            "text": "\u26a0\ufe0f This is a work in progress. For now, there\u2019s no easy and officially supported way to install Cozy. You have to install it and all this dependencies by hand. This tutorial is intended for tech savvy people wanting to give Cozy a first try without waiting for the official documentation and images.   For now, this documentation don\u2019t explain how to install the technology stack required for connector, as the technology we use may evolve. So you won\u2019t be able to run the connectors.   Most of the following commands require root privileges. You can either open a root shell or use  sudo  when needed;", 
            "title": "How to install Cozy on Debian Stable"
        }, 
        {
            "location": "/install/manual/#pre-requisites", 
            "text": "Cozy requires a CouchDB 2 database server, a reverse proxy and an SMTP server. We\u2019ll use Nginx in this tutorial but feel free to use your reverse proxy of choice. You ll also need a domain name and know how to associate all of its subdomains to the IP address of your server.", 
            "title": "Pre-requisites"
        }, 
        {
            "location": "/install/manual/#install-couchdb", 
            "text": "", 
            "title": "Install CouchDB"
        }, 
        {
            "location": "/install/manual/#debian-8", 
            "text": "CouchDB now has an official package repository, so you just need: curl -L https://couchdb.apache.org/repo/bintray-pubkey.asc | sudo apt-key add -\necho  deb https://apache.bintray.com/couchdb-deb jessie main  | sudo tee -a /etc/apt/sources.list.d/couchdb.list\nsudo apt-get update   sudo apt-get install couchdb", 
            "title": "Debian 8"
        }, 
        {
            "location": "/install/manual/#debian-9", 
            "text": "Waiting for the package repository to support Debian Stretch, you can still build CouchDB 2.1.0  by yourself .", 
            "title": "Debian 9"
        }, 
        {
            "location": "/install/manual/#install-the-cozy-stack", 
            "text": "", 
            "title": "Install the Cozy Stack"
        }, 
        {
            "location": "/install/manual/#already-compiled", 
            "text": "The Cozy server is just a single binary. You can fetch one of its releases from Github: curl -o /usr/local/bin/cozy-stack \\\n     -L https://github.com/cozy/cozy-stack/releases/download/2017M2-alpha/cozy-stack-linux-amd64-2017M2-alpha\nchmod +x /usr/local/bin/cozy-stack\nadduser --system \\\n        --no-create-home \\\n        --shell /bin/bash \\\n        --group --gecos \\\n           Cozy  cozy\nmkdir /var/log/cozy\nchown cozy: /var/log/cozy\nmkdir /var/lib/cozy\nchown -R cozy: /var/lib/cozy  You can configure your server using a JSON or YAML file. Let\u2019s fetch the sample configuration file: mkdir /etc/cozy\ncurl -o /etc/cozy/cozy.yaml \\\n     https://raw.githubusercontent.com/cozy/cozy-stack/master/cozy.example.yaml\nchown -R cozy: /etc/cozy  Edit this file to adapt it to your configuration. You should setup a directory to store the files. For example:   fs:\n    url: file://localhost/var/lib/cozy  Don\u2019t forget to allow Cozy user to write inside this folder.", 
            "title": "Already compiled"
        }, 
        {
            "location": "/install/manual/#compile-a-recent-stack", 
            "text": "The released build may not contain the latest fixes. If you want an up to date version of the stack, you can compile it from the sources. This requires to install the Go compiler, fetch the sources and compile them: apt-get --no-install-recommends -y install \\\n        ca-certificates \\\n        curl \\\n        net-tools \\\n        nginx \\\n        sudo \\\n        vim-tiny \\\n        build-essential \\\n        pkg-config \\\n        erlang \\\n        libicu-dev \\\n        libmozjs185-dev \\\n        libcurl4-openssl-dev \\\n        git\ncd /tmp\ncurl -LO https://storage.googleapis.com/golang/go1.8.3.linux-amd64.tar.gz\ntar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz\nPATH=$PATH:/usr/local/go/bin go get -u github.com/cozy/cozy-stack\ncp /root/go/bin/cozy-stack /usr/local/bin/cozy-stack\nchmod +x /usr/local/bin/cozy-stack", 
            "title": "Compile a recent stack"
        }, 
        {
            "location": "/install/manual/#configuration", 
            "text": "", 
            "title": "Configuration"
        }, 
        {
            "location": "/install/manual/#cozy", 
            "text": "The Cozy server requires a main password: sudo /usr/local/bin/cozy-stack config passwd /etc/cozy/  This password will be asked every time you use the  cozy-stack  command line. To prevent this, you can set the  COZY_ADMIN_PASSWORD  environment variable.", 
            "title": "Cozy"
        }, 
        {
            "location": "/install/manual/#nginx-and-self-signed-certificates", 
            "text": "Let\u2019s assume you want to host a server on  mycozy.tld  with a self-signed certificate. Generate the certificate. We need a wild-card certificate, as every application inside Cozy will have it\u2019s own sub-domain: sudo openssl req -x509 -nodes -newkey rsa:4096 \\\n    -keyout /etc/cozy/mycozy.tld.key \\\n    -out /etc/cozy/mycozy.tld.crt \\\n    -days 365 -subj  /CN={*.mycozy.tld}  Then create a virtual host for your server by creating a file at  /etc/cozy/sites-available/mycozy.tld.conf  with the following configuration template. =====\nThen create a virtual host for your server by creating  /etc/nginx/sites-available/mycozy.tld  and enable it by creating a symbolic link: sudo ln -s  /etc/nginx/sites-available/mycozy.tld.conf  \\\n       /etc/nginx/sites-enabled/  You can check that your configuration is valid by running sudo nginx -t -c /etc/nginx/nginx.conf  And start NGinx: sudo service nginx start  Or, if you use systemd: sudo systemctl start nginx\nsudo systemctl enable nginx # enable the nginx service at startup, if need to", 
            "title": "NGinx and self-signed certificates"
        }, 
        {
            "location": "/install/manual/#sample-configuration-files", 
            "text": "Put this file into  /etc/nginx/sites-available  and enable it by creating a symlink in  /etc/nginx/sites-enabled . In this template, you need to replace the following placeholders:\n  - %PORT% with the public port nginx will listen to (default should be 443);\n  - %SERVER_PORT% with the private port cozy will listen to (default should be 8080);\n  - %DOMAIN% with your domain of choice:  mycozy.tld  in this example server {\n    listen %PORT%;\n\n    server_name *.%DOMAIN%;\n\n    ssl_certificate /etc/cozy/%DOMAIN%.crt;\n    ssl_certificate_key /etc/cozy/%DOMAIN%.key;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers EECDH+AES;\n    ssl_prefer_server_ciphers on;\n    ssl on;\n\n    gzip_vary on;\n    client_max_body_size 1024M;\n\n    add_header Strict-Transport-Security max-age=31536000;\n\n    location / {\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_redirect http:// https://;\n        proxy_pass http://127.0.0.1:8080;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection  upgrade ;\n    }\n\n    access_log /var/log/nginx/cozy.log;\n}", 
            "title": "Sample configuration files"
        }, 
        {
            "location": "/install/manual/#apache-and-lets-encrypt-certificates", 
            "text": "Cozy is leveraging subdomains, one way ( app.user.domain.tld ) or the other ( app-user.domain.tld ). While your DNS and your Apache Virtual Hosts can easily be wildcarded, Let s Encrypt certificates don t (at least until January 2018). But they can contain multiple domains, and that s what you can leverage:  First you need to define a virtual host for you Cozy instance:  /etc/apache2/sites-available/mycozy.tld.conf : VirtualHost *:443 \n    ServerName mycozy.tld\n    ServerAlias *.mycozy.tld\n\n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / mycozy.tld\n    ProxyPreserveHost on\n\n    ErrorLog ${APACHE_LOG_DIR}/error_cozy.log\n    CustomLog ${APACHE_LOG_DIR}/access_cozy.log combined /VirtualHost  sudo a2ensite mycozy.tld.conf\nsudo service apache2 reload  Note that this virtual host is listening on port 443, yet it doesn t enable  SSLEngine . It s because Certbot needs this virtual host to perform TLS-DNI domain validation challenge to be able to generate your TLS certificate (more details  here  ).  Now you can generate Let s Encrypt certificates, using  Certbot :  sudo certbot certonly --apache --domains mycozy.tld,drive.mycozy.tld,photos.mycozy.tld,settings.mycozy.tld  This will generate 1 certificate containing multiple sub-domains. It is installed in  /etc/letsencrypt/live/mycozy.tld .  So the final step is to enable SSL/TLS in your virtual host:  /etc/apache2/sites-available/mycozy.tld :     ...\n    SSLEngine on\n    Header always set Strict-Transport-Security  max-age=31536000; includeSubDomains \n    SSLCertificateFile  /etc/letsencrypt/live/mycozy.tld/fullchain.pem \n    SSLCertificateKeyFile  /etc/letsencrypt/live/mycozy.tld/privkey.pem \n    ...  sudo service apache2 reload", 
            "title": "Apache and Let's Encrypt certificates"
        }, 
        {
            "location": "/install/manual/#automation-for-multiple-instances", 
            "text": "You can make all this automated in 2 simple steps:  Define a virtual host template:  # VirtualHost *:80 \n#    ServerName __DOMAIN__\n#    ServerAlias *.__DOMAIN__\n#\n#    # Force SSL\n#    Redirect permanent /  https://%{HTTP_HOST} \n# /VirtualHost  VirtualHost *:443 \n    ServerName __DOMAIN__\n    ServerAlias *.__DOMAIN__\n\n#    SSLEngine on\n#    Header always set Strict-Transport-Security  max-age=31536000; includeSubDomains \n#    SSLCertificateFile  /etc/letsencrypt/live/__DOMAIN__/fullchain.pem \n#    SSLCertificateKeyFile  /etc/letsencrypt/live/__DOMAIN__/privkey.pem \n\n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / __DOMAIN__\n    ProxyPreserveHost on\n\n    ErrorLog ${APACHE_LOG_DIR}/error___DOMAIN__.log\n    CustomLog ${APACHE_LOG_DIR}/access___DOMAIN__.log combined /VirtualHost   Then define this script, that will take care of creating Cozy instance as well as Apache/Let s Encrypt stuff:  #!/bin/bash\n\ndomain=$1\napps=$2\nvhost= $domain.conf \nvhost_file= /etc/apache2/sites-available/$vhost \n\npassphrase=`openssl rand -base64 12 | head -c -3`\necho  Adding Cozy instance with passphase $passphrase \nsudo -u cozy cozy-stack instances add --host 0.0.0.0 --apps $apps --passphrase $passphrase $domain\n\n\ndomains= $domain \n\nIFS=',' read -ra apps_array    $apps \nfor app in  ${apps_array[@]} ; do\n    domains= $domains,$app.$domain \ndone\n\necho  Creating Apache virtual host for Certbot to be able to use TLS-SNI challenge \nsed  s/__DOMAIN__/$domain/g  cozy_vhost.conf | sudo tee $vhost_file   /dev/null\n\nsudo a2ensite $vhost\nsudo service apache2 reload\n\necho  Getting Let's Encrypt certificate for $domains \nsudo certbot certonly --apache --non-interactive --force-renewal --quiet --domains $domains\n\necho  Enabling Let's Encrypt certificate, reloading Apache \nsudo sed -i 's/^#//g' $vhost_file\nsudo service apache2 reload   You can use this script this way:  ./cozy_add_instance.sh alice.mycozy.tld drive,photos,collect,settings\n./cozy_add_instance.sh bob.mycozy.tld drive,photos,collect,settings", 
            "title": "Automation for multiple instances"
        }, 
        {
            "location": "/install/manual/#dns", 
            "text": "Make sure to associate  *.mycozy.tld  with the IP address of your server. For example, add the following records to your DNS (replacing  mycozy.tld  with your domain of choice): mycozy.tld   A     your IP\n*.mycozy.tld CNAME mycozy.tld", 
            "title": "DNS"
        }, 
        {
            "location": "/install/manual/#running", 
            "text": "For now, we\u2019ll just run the server as a background job, but it is highly recommended to use some supervisor software. First, start the server: sudo -b -u cozy sh -c '/usr/local/bin/cozy-stack serve \\\n     --log-level info \\\n     --host 0.0.0.0   /var/log/cozy/cozy.log 2  /var/log/cozy/cozy-err.log'  Then, create your instance and install the applications: cozy-stack instances add \\\n           --host 0.0.0.0 \\\n           --apps drive,photos,collect,settings \\\n           --passphrase  XXX  \\\n           mycozy.tld  passphrase  XXX  allows to set the initial password of the instance. You can add other instances by just running this commands again.  The url of your cozy determines the name of your instance.\nIf you choose another public port than the default public port for SSL (443), say  1443 , then you should reflect this when creating your cozy instance with the ${instance_domain} as  mycozy.tld:1443 .", 
            "title": "Running"
        }, 
        {
            "location": "/install/manual/#todo", 
            "text": "Cozy also requires a SMTP server (or relay).", 
            "title": "TODO"
        }, 
        {
            "location": "/dev/", 
            "text": "Let\ns hack some code\nTutorials\n\n\nintroduction to Cozy architecture\n;\nhow to develop your first application\n;\nhow to develop a connector\n;\n\n\nHow to\nComing soon!\nAPI References\nBrowse the full API reference inside our repositories:\nCozy Client JS Reference\n\n\ndocuments\n;\nfiles\n;\nauthentification\n;\nauthentication with OAuth2\n;\nsettings\n;\ninter-app communication\n;\njobs and triggers\n;\nsharing\n;\noffline\n;\nCozy Bar\n;\n\n\nRaw Server API\n\n\n\n\nintroduction:\n\n\n\n\n\nAPI architecture\n;\n\n\nconventions\n;\n\n\nJSON-API\n;\n\n\n\n\n\n\napplications\n: install, update, list applications;\n\n\nmerketplace\n;\npermissions\n;\nsettings\n;\nauth\n;\ndocuments\n;\nquery the database\n;\nfiles\n;\nlink files to documents\n;\njobs\n;\nworkers\n architecture\n and \n\nAPI\n;\ninter-application communication\n;\nsharing\n;\nconnectors\n;", 
            "title": "Let's hack some code"
        }, 
        {
            "location": "/dev/#lets-hack-some-code", 
            "text": "", 
            "title": "Let's hack some code"
        }, 
        {
            "location": "/dev/#tutorials", 
            "text": "introduction to Cozy architecture ; how to develop your first application ; how to develop a connector ;", 
            "title": "Tutorials"
        }, 
        {
            "location": "/dev/#how-to", 
            "text": "Coming soon!", 
            "title": "How to"
        }, 
        {
            "location": "/dev/#api-references", 
            "text": "Browse the full API reference inside our repositories:", 
            "title": "API References"
        }, 
        {
            "location": "/dev/#cozy-client-js-reference", 
            "text": "documents ; files ; authentification ; authentication with OAuth2 ; settings ; inter-app communication ; jobs and triggers ; sharing ; offline ; Cozy Bar ;", 
            "title": "Cozy Client JS Reference"
        }, 
        {
            "location": "/dev/#raw-server-api", 
            "text": "introduction:   API architecture ;  conventions ;  JSON-API ;    applications : install, update, list applications;  merketplace ; permissions ; settings ; auth ; documents ; query the database ; files ; link files to documents ; jobs ; workers  architecture  and  API ; inter-application communication ; sharing ; connectors ;", 
            "title": "Raw Server API"
        }, 
        {
            "location": "/dev/intro/", 
            "text": "Introduction\nCozy is a personal server hosting applications that allow collect and manipulate all your personal data.\nThere are two kind of applications:\n\n\nweb applications\n: that\ns Single Page Applications (SPA) written in HTML and JavaScript that run inside the user\ns browser. They interact with the server through its API. This API allows to manipulate data and files and to perform miscellaneous tasks, like send emails;\nconnectors\n: that\ns small application written in JavaScript, running on the server side, that import your data from remote sources.\n\n\nIn this tutorial, you\nll learn how to \nwrite a client application\n and \n\na connector\n.", 
            "title": "Architecture"
        }, 
        {
            "location": "/dev/intro/#introduction", 
            "text": "Cozy is a personal server hosting applications that allow collect and manipulate all your personal data. There are two kind of applications:  web applications : that s Single Page Applications (SPA) written in HTML and JavaScript that run inside the user s browser. They interact with the server through its API. This API allows to manipulate data and files and to perform miscellaneous tasks, like send emails; connectors : that s small application written in JavaScript, running on the server side, that import your data from remote sources.  In this tutorial, you ll learn how to  write a client application  and  a connector .", 
            "title": "Introduction"
        }, 
        {
            "location": "/dev/app/", 
            "text": "How to create your first Cozy application\nPrerequisite\nDeveloping an application for Cozy is quite easy. All you need to know is:\n - how to develop a single page application in HTML5. You can use the tools or framework of your choice, or no framework;\n - basic Docker knowledges.\nThe only required tool is Docker. We have been told that installing Docker on some familial flavours of Windows may be a bit difficult. If you use Windows, please check if Docker is available on your system.\nInstall the development environment\n\n\nOn GNU/Linux, according \nto the documentation\n: \u00ab\u00a0The docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root and other users can only access it using sudo. If you don\u2019t want to use sudo when you use the docker command, create a Unix group called docker and add users to it. Be warned that the docker group grants privileges equivalent to the root user. You should have a look at \n\nDocker\u2019s documentation on security\n.\n\n\nEvery application running inside Cozy is a client-side HTML5 application interacting with your data through the API of the server. To develop an application, you\u2019ll require a running Cozy server.\nThe easiest way is to use the Docker image for developers we provide.\nJust install it:\ndocker pull cozy/cozy-app-dev\n\n\n\n\n(We update this image on a regular basis with the latest version of the server and our library. Don\u2019t forget to update the image by running \ndocker pull cozy/cozy-app-dev\n from time to time).\nCreate your first application\nThe minimal application consist of only two files:\n - an HTML file, \nindex.html\n, with the markup and the code of your application;\n - a manifest describing the application. It\u2019s a JSON file named \n\nmanifest.webapp\n with the name of the application, the permissions it requires\u2026 We\u2019ll have a deeper look to it content later. #TODO add an inner link to the manifest description.\nYour application will be able to use some shared libraries provided by the server, so you don\u2019t have to include them into your project.\nYour application requires some informations to interact with the server API, for example the URL of its entrypoint, and an auth token. This data will be dynamically injected into \nindex.html\n when it serves the page. So the \n\nindex.html\n file has to contain some string that will be replaced by the server. The general syntax of this variables is \n\n{{\u2026}}\n, so don\u2019t use this syntax for other purpose in the page, for example inside comments.\nYou can use the following variables:\n\n\n{{.Domain}}\n will be substituted by the URL of the API entrypoint;\n{{.Token}}\n will be replaced by a token that authenticate your application when accessing the API;\n{{.Locale}}\n: the lang f the instance;\n{{.AppName}}\n: the name of the application;\n{{.IconPath}}\n will be replaced by HTML code to display the \n\nfavicon\n;\n{{.CozyClientJS}}\n will be replaced with HTML code to inject the Cozy client library;\n{{.CozyBar}}\n will be replaced with HTML code to inject the upper menu bar.\n\n\nUse the API\nIf you added \n{{.CozyClientJS}}\n to your page, interacting with the server will be as easy as using the Cozy Client JS library. All you have to do is to initiate the library with the server parameters (the URL of the API and the auth token of your application):\n  window.cozy.client.init({cozyURL: \n\u2026\n, token: \n\u2026\n});\n\n\n\n\nYou can then interact with the server by using methods of the \nwindow.cozy.client\n properties. For example, to get current disk usage:\n  cozy.client.settings.diskUsage()\n    .then(function (usage) {console.log(\nUsage (promise)\n, usage);});\n    .catch(function(err){ console.log(\nfail\n, err); });\n\n\n\n\nThis library embeds most of the available server APIs: manipulate documents and files, manage applications and server settings\u2026 It also provides some some methods to help application keep working while being offline.\nSome server APIs may not be available right now through the library. If you want to use one of this method, you\u2019ll have to call it manually. See below. #TODO - add inner link.\nBehind the magic\nSome server APIs may not be available right now through the library. If you want to use one of this method, you\u2019ll have to call it manually. We\u2019ll describe here how to access the API without using the Cozy Cliznt JS library.\nConnecting to the API requires three things:\n\n\nits URL, injected into the page through the \n{{.Domain}}\n variable;\nthe application auth token, injected into the page through the \n{{.Token}}\n variable. Each request sent to the server must include this token in the \n\nAuthorization\n header;\nthe session cookie, created when you connect to your server. This is an \nHttpOnly cookie\n, meaning that JavaScript applications can\u2019t read it. This prevent a malicious script to stole the cookie.\n\n\nHere\u2019s a sample code that get API informations provided by the server and query the API:\n    \ndiv data-cozy-token=\n{{.Token}}\n data-cozy-domain=\n{{.Domain}}\n /\n\n\n\n\ndocument.addEventListener('DOMContentLoaded', () =\n {\n  \nuse strict\n;\n  const app = document.querySelector('[data-cozy-token]');\n  fetch(`//${app.dataset.cozyDomain}/apps`,\n  {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${app.dataset.cozyToken}` // Here we use the auth token\n    },\n    credentials: 'include' // don\u2019t forget to include the session cookie\n  })\n  .then(function (response) {\n    if (response.ok) {\n      response.json().then((result) =\n {\n        console.log(result);\n      });\n    } else {\n      throw new Error('Network response was not ok.');\n    }\n  })\n  .catch(function (error) {\n    console.log('There has been a problem with your fetch operation: ' + error.message);\n  });\n});\n\n\n\n\nThe manifest\nEach application must have a \u201cmanifest\u201d. It\u2019s a JSON file named \nmanifest.webapp\n stored at the root of the application directory. It describes the application, the type of documents it uses, the permissions it require\u2026\nHere\u2019s a sample manifest:\n{\n  \nname\n: \nMy Awesome application\n,\n  \npermissions\n: {\n    \napps\n: {\n      \ntype\n: \nio.cozy.apps\n\n    },\n    \npermissions\n: {\n      \ntype\n: \nio.cozy.permissions\n\n    },\n    \nsettings\n: {\n      \ntype\n: \nio.cozy.settings\n\n    },\n    \nsample\n: {\n      \ntype\n: \nio.cozy.dev.sample\n,\n      \nverbs\n: [\nGET\n, \nPOST\n, \nPUT\n, \nPATCH\n, \nDELETE\n]\n    },\n    \njobs\n: {\n      \ntype\n: \nio.cozy.jobs\n\n    }\n  },\n  \nroutes\n: {\n    \n/\n: {\n      \nfolder\n: \n/\n,\n      \nindex\n: \nindex.html\n,\n      \npublic\n: false\n    },\n    \n/public\n: {\n      \nfolder\n: \n/public\n,\n      \nindex\n: \nindex.html\n,\n      \npublic\n: true\n    }\n  }\n}\n\n\n\n\nPermissions\nApplications require permissions to use most of the APIs. Permissions can be described inside the manifest, so the server can ask the user to grant them during installation. Applications can also request permissions at run time.\nA permission must at type contain a target, the type of objects the application want to interact with. Can be a document type, or an action on the server. By default, all grant on this object are granted, but we can also request fine grained permissions, for example limiting to read access. We can also limit the scope to a subset of the documents.\nIn the manifest, each permission is an object, with a random name and some properties:\n\n\ntype\n: \n\nmandatory\n the document type or action name;\ndescription\n: a text that will be displayed to the user to explain why the application require this permission;\nverbs\n: an array of HTTP verbs. For example, to limit permissions to read access, use \n\n[\nGET\n]\n;\nselector\n: a document attribute to limit access to a subset of documents;\nvalues\n: array of allowed values for this attribute.\n\n\nAn application can request a token that grant access to a subset of its own permissions. For example if the application has full access to the files, it can obtain a token that give only read access on a file. Thus, the application can make some documents publicly available. The public page of the application will use this token as authentication token when accessing the API.\nSamples\nApplication require full access to files:\n{\n  \npermissions\n: {\n    \nfiles\n: {\n      \ndescription\n: \n\u2026\n,\n      \ntype\n: \nio.cozy.files\n\n    },\n  }\n}\n\n\n\n\nApplication want to be able to read the contact informations of \ncozy@cozycloud.cc\n{\n  \npermissions\n: {\n    \ncontact\n: {\n      \ntype\n: \nio.cozy.contacts\n,\n      \nverbs\n: [\nGET\n],\n      \nselector\n: \nemail\n,\n      \nvalues\n: [\ncozy@cozycloud.cc\n]\n    }\n  }\n}\n\n\n\n\nRouting\nThe application must declare all of its URLs (routes) inside the manifest. A route is an object associating an URL to an HTML file. Each route has the following properties:\n\n\nfolder\n: the base folder of the route;\nindex\n: the name of the file inside this folder;\npublic\n: a boolean specifying whether the route is public or private (default).\n\n\nSample:\nroutes\n: {\n  \n/admin\n: {\n    \nfolder\n: \n/\n,\n    \nindex\n: \nadmin.html\n,\n    \npublic\n: false\n  },\n  \n/public\n: {\n    \nfolder\n: \n/public\n,\n    \nindex\n: \nindex.html\n,\n    \npublic\n: true\n  },\n  \n/assets\n: {\n    \nfolder\n: \n/assets\n,\n    \npublic\n: true\n  }\n}\n\n\n\n\ncozy-client-js\nThis library embeds most of the available server APIs: manipulate documents and files, manage applications and server settings\u2026 It also provides some some methods to help application keep working while being offline.\nThe library expose a client API under the \nwindow.cozy.client\n namespace. Before using it, you have to initiate the library with the server parameters (the URL of the API and the auth token of your application):\n  window.cozy.client.init({cozyURL: \n\u2026\n, token: \n\u2026\n});\n\n\n\n\nThe library supports two programming paradigms: callback and Promises, so you can use your favorite one. If you prefer using callbacks rather than Promises, just add \ndisablePromises\n to the options when initializing the library:\n  window.cozy.client.init({cozyURL: \n\u2026\n, token: \n\u2026\n, disablePromises: true});\n  window.client.settings.diskUsage(function (err, res) {\n    (\u2026)\n  });\n\n\n\n\nRaw API documentation\nIn this tutorial, we\u2019ll only see a few samples of how to use the library. For a complete description of all available methods, please refer to its own documentation:\n\n\ndocuments\n;\nfiles\n;\nauthentification\n;\nauthentication with OAuth2\n;\nsettings\n;\ninter-app communication\n;\njobs and triggers\n;\nsharing\n;\noffline\n;\nCozy Bar\n;\n\n\nManipulating documents\nInside cozy data system, all documents are typed. To prevent applications to create document types with the same name but different description, the naming of the doctypes use \nthe Java specification\n. Every document type name must be prefixed by the reverted domain name of its creator. If you don\u2019t own a domain name, you can also use your email address. For example, doctypes created by Cozy are prefixed by \n\nio.cozy\n or \n\nio.cozy.labs\n. If you don\u2019t own a domain name, and your email address is \n\nfoo@bar.cloud\n, prefix your doctype names with \n\ncloud.bar.foo\n.\nBefore manipulating documents, you have to request permission to access their doctype, either in the manifest or dynamically.\nEvery method allowing to handle document are available under the \ncozy.client.data\n namespace. For example:\n\n\ncozy.client.data.create(doctype, attributes)\n, \n\ncozy.client.data.update(doctype, doc, newdoc)\n, \n\ncozy.client.data.delete(doctype, doc)\n to create, update and delete documents;\ncozy.client.data.updateAttributes(doctype, id, changes)\n to only update some attributes of a document;\ncozy.client.data.find(doctype, id)\n return a document using its ident;\ncozy.client.data.changesFeed(doctype, options)\n get the latests updates of documents of a doctype.\nyou can attach files to a document using \ncozy.client.data.addReferencedFiles(doc, fileIds)\n and list attachments with \n\ncozy.client.data.listReferencedFiles(doc)\n.\n\n\nQuerying\nTo search documents inside the database, you first need to create an index on some attributes of the documents, then perform a query on this index. The library offers the following methods:\n\n\ncozy.client.data.defineIndex(doctype, fields)\n to create the index;\ncozy.client.data.query(indexReference, query)\n to query an index. The query parameter uses the syntax of the \n\nMango API\n from CouchDB 2.\n\n\nFor example, to search contacts by their email address, you could use:\ncozy.client.data.defineIndex(\nio.cozy.contacts\n, [\nemail\n])\n.then((index) =\n {\n  return cozy.data.query(index, {\nselector\n: {email: \ncozy@cozycloud.cc\n}})\n})\n.then( (result) =\n {\n  console.log(result[0].name);\n});\n\n\n\n\nManipulating files\nThe metadata of the files are stored inside the server database, allowing to perform advanced queries, and the files themselves on a virtual file system.\nThe library offer a lot of methods under \ncozy.client.files\n namespace to manipulate files. Most of the methods allows to manipulate a file or folder either by its id or by its full path. Here are the most commons ones, but a lot of other methods are available in the \n\nraw API documentation\n:\n\n\ncreate()\n and \n\nupdateById()\n to create and update a file;\ncreateDirectory()\n to create a folder;\nupdateAttributesById()\n et \n\nupdateAttributesByPath()\n allow to update some metadata;\nuse \ndestroyById\n to remove a file;\na virtual trash is available. You can put files into the trash (\ntrashById()\n) and restore them (\n\nrestoreById()\n). You can also list the content of the trash (\n\nlistTrash()\n) and purge all trashed files (\n\nclearTrash()\n);\nstatById(id)\n et \n\nstatByPath(path)\n return the metadata and, or folders, their content;\n\n\nFolders\nWhen using \nstatById()\n or \n\nstatByPath()\n to get metadata of of folder, you can than call \n\nrelations()\n on the resulting object to access their content. For example, to list content of the root folder, use:\ncozy.client.files.statByPath(\n/\n)\n.then((dir) =\n {\n  console.log(dir.relations(\ncontents\n));\n})\n\n\n\n\nSome special folder have a pre-defined id that will never change:\n\n\nio.cozy.files.root-dir\n is the root of the filesystem;\nio.cozy.files.trash-dir\n is the trash.\n\n\nThe Cozy Bar\nThe \nCozy Bar\n is a component that display the Cozy menu on the top of your application and allow inter-apps features like content sharing.\nYour application interacts with this component through \ncozy-bar.js\n, a library injected into your pages by the server when you add \n\n{{.CozyBar}}\n in the header. It exposes an API behind the window.cozy.bar namespace.\nBefore using it, you have to initialize the library: \nwindow.cozy.bar.init({appName: \nMon application\n})\n.\nStyling\nIf you plan to build a webapp to run on Cozy, you\u2019ll probably want to use a simple and elegant solution to build your interfaces without the mess of dealing with complex markup and CSS. Then \nCozy UI\n is here for you!\nIt relies on Stylus as preprocessor. You can add it as a library in your project to use it out-of-the-box.\nStart the development server\nNow it\u2019s time to start the development server, to test our application.\n(remember what we previously said about the permissions required to run Docker: if your user doesn\u2019t belong to the docker group, you\u2019ll have to use \nsudo\n to run each of this commands.)\nTo run your application inside the development server, just run the following command from the folder where your \nindex.html\n and \n\nmanifest.webapp\n files leave:\ndocker run --rm -it -p 8080:8080 -p 5984:5984 -p 8025:8025 -v $(pwd):/data/cozy-app --name cozydev cozy/cozy-app-dev\n\n\n\n\nLet\u2019s have a quick look at this command, so you can adapt it to your needs:\n\n\nrm\n will delete the server when you stop it. This prevent Docker from keeping a lot of unused stopped images;\n-it\n allow to attach an interactive terminal, so you\u2019ll be able to use the command line inside the server;\n-p 8080:8080\n: the server listens on port 8080 on the virtual machine. We forward this port to the same port on your local machine. To use another local port, for example 9090, use \n\n-p 9090:8080\n;\n-p 5984:5984\n: this is just a convenient way to access the CouchDB database running inside the server. Point your browser to \n\nhttp://cozy.tools:5984/_utils/\n to access its administrative interface;\n-p 8025:8025\n\u00a0: Cozy requires a mail server. In the development image, we don\u2019t use a real email server, but a software that can display the sent messages. Just point your browser to \n\nhttp://cozy.tools:8025/\n to display the messages sent by the server;\n-v $(pwd):/data/cozy-app\n this mount the current folder, where your application leaves, inside the server. This is what make the application available on the server;\nname cozydev\n name the running virtual machine \n\ncozydev\n, so you can easily refer to it from other Docker commands. For example, if you want to connect to a shell inside the server, you can use \n\ndocker exec -ti /bin/bash\n.\n\n\nWith this syntax, there is no data persistance: all your test data will be lost every time you stop the server. This is a good way to prevent side effects and start on a clean base, with an empty database.\nHowever, if you want to persist data, you have to mount two folders from the virtual server to local folders: \n/usr/local/couchdb/data\n (database) and \n\n/data/cozy-storage\n (the virtual filesystem). This can be achieved by adding to the command line \n\n-v ~/cozy/data/db:/usr/local/couchdb/data -v ~/cozy/data/storage:/data/cozy-storage\n which will store the server\u2019s data into \n\n~/cozy/data\n.\nOnce the server started, go to \nhttp://app.cozy.tools:8080/#\n, connect to the server with the default password \n\ncozy\n and you should be able to start testing your application.\nYou can also access the following URLs:\n\n\nhttp://cozy.tools:5984/_utils\n to get the database administrative panel;\nhttp://cozy.tools:8025/\n to display the emails sent by the server.\n\n\nTest multiple applications\nYou can install more than one application into the development server, for example to test communication between applications. In order to achieve this, you have to mount the folder where your application leaves into subfolders of \n/data/cozy-apps\n. For example, if the code of Cozy Drive and Cozy Photos is on your local filesystem in \n\n~/cozy/drive\n and \n\n~/cozy/photos\n, start the development server with:\ndocker run --rm -it -p 8080:8080 -p 5984:5984 -p 8025:8025 -v \n~/cozy/drive\n:/data/cozy-app/drive\n -v \n~/cozy/photos:/data-cozy-app/photos\n --name=cozydev cozy/cozy-app-dev\n\n\n\n\nYou\u2019ll access the applications by connecting to \nhttp://drive.cozy.tools:8080/\n and \n\nhttp://photos.cozy.tools:8080\n.\nTODO\nCe serveur de d\u00e9veloppement utilise les noms de domaine \n*.cozy.tools\n. Nous avons param\u00e9tr\u00e9 ce domaine pour qu\u2019il pointe toujours vers \n\n127.0.0.1\n, l\u2019adresse de votre machine locale.\nLa branche \nsample\n du d\u00e9p\u00f4t de cette documentation contient un squelette minimaliste avec les fichiers n\u00e9cessaires pour cr\u00e9er une application. Vous pouvez les r\u00e9cup\u00e9rer en faisant\u00a0:\ngit clone -b sample https://github.com/cozy/cozy-docdev-v3.git myapp\ncd myapp", 
            "title": "Create your first app"
        }, 
        {
            "location": "/dev/app/#how-to-create-your-first-cozy-application", 
            "text": "", 
            "title": "How to create your first Cozy application"
        }, 
        {
            "location": "/dev/app/#prerequisite", 
            "text": "Developing an application for Cozy is quite easy. All you need to know is:\n - how to develop a single page application in HTML5. You can use the tools or framework of your choice, or no framework;\n - basic Docker knowledges. The only required tool is Docker. We have been told that installing Docker on some familial flavours of Windows may be a bit difficult. If you use Windows, please check if Docker is available on your system.", 
            "title": "Prerequisite"
        }, 
        {
            "location": "/dev/app/#install-the-development-environment", 
            "text": "On GNU/Linux, according  to the documentation : \u00ab\u00a0The docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user root and other users can only access it using sudo. If you don\u2019t want to use sudo when you use the docker command, create a Unix group called docker and add users to it. Be warned that the docker group grants privileges equivalent to the root user. You should have a look at  Docker\u2019s documentation on security .  Every application running inside Cozy is a client-side HTML5 application interacting with your data through the API of the server. To develop an application, you\u2019ll require a running Cozy server. The easiest way is to use the Docker image for developers we provide. Just install it: docker pull cozy/cozy-app-dev  (We update this image on a regular basis with the latest version of the server and our library. Don\u2019t forget to update the image by running  docker pull cozy/cozy-app-dev  from time to time).", 
            "title": "Install the development environment"
        }, 
        {
            "location": "/dev/app/#create-your-first-application", 
            "text": "The minimal application consist of only two files:\n - an HTML file,  index.html , with the markup and the code of your application;\n - a manifest describing the application. It\u2019s a JSON file named  manifest.webapp  with the name of the application, the permissions it requires\u2026 We\u2019ll have a deeper look to it content later. #TODO add an inner link to the manifest description. Your application will be able to use some shared libraries provided by the server, so you don\u2019t have to include them into your project. Your application requires some informations to interact with the server API, for example the URL of its entrypoint, and an auth token. This data will be dynamically injected into  index.html  when it serves the page. So the  index.html  file has to contain some string that will be replaced by the server. The general syntax of this variables is  {{\u2026}} , so don\u2019t use this syntax for other purpose in the page, for example inside comments. You can use the following variables:  {{.Domain}}  will be substituted by the URL of the API entrypoint; {{.Token}}  will be replaced by a token that authenticate your application when accessing the API; {{.Locale}} : the lang f the instance; {{.AppName}} : the name of the application; {{.IconPath}}  will be replaced by HTML code to display the  favicon ; {{.CozyClientJS}}  will be replaced with HTML code to inject the Cozy client library; {{.CozyBar}}  will be replaced with HTML code to inject the upper menu bar.", 
            "title": "Create your first application"
        }, 
        {
            "location": "/dev/app/#use-the-api", 
            "text": "If you added  {{.CozyClientJS}}  to your page, interacting with the server will be as easy as using the Cozy Client JS library. All you have to do is to initiate the library with the server parameters (the URL of the API and the auth token of your application):   window.cozy.client.init({cozyURL:  \u2026 , token:  \u2026 });  You can then interact with the server by using methods of the  window.cozy.client  properties. For example, to get current disk usage:   cozy.client.settings.diskUsage()\n    .then(function (usage) {console.log( Usage (promise) , usage);});\n    .catch(function(err){ console.log( fail , err); });  This library embeds most of the available server APIs: manipulate documents and files, manage applications and server settings\u2026 It also provides some some methods to help application keep working while being offline. Some server APIs may not be available right now through the library. If you want to use one of this method, you\u2019ll have to call it manually. See below. #TODO - add inner link.", 
            "title": "Use the API"
        }, 
        {
            "location": "/dev/app/#behind-the-magic", 
            "text": "Some server APIs may not be available right now through the library. If you want to use one of this method, you\u2019ll have to call it manually. We\u2019ll describe here how to access the API without using the Cozy Cliznt JS library. Connecting to the API requires three things:  its URL, injected into the page through the  {{.Domain}}  variable; the application auth token, injected into the page through the  {{.Token}}  variable. Each request sent to the server must include this token in the  Authorization  header; the session cookie, created when you connect to your server. This is an  HttpOnly cookie , meaning that JavaScript applications can\u2019t read it. This prevent a malicious script to stole the cookie.  Here\u2019s a sample code that get API informations provided by the server and query the API:      div data-cozy-token= {{.Token}}  data-cozy-domain= {{.Domain}}  /  document.addEventListener('DOMContentLoaded', () =  {\n   use strict ;\n  const app = document.querySelector('[data-cozy-token]');\n  fetch(`//${app.dataset.cozyDomain}/apps`,\n  {\n    method: 'GET',\n    headers: {\n      Authorization: `Bearer ${app.dataset.cozyToken}` // Here we use the auth token\n    },\n    credentials: 'include' // don\u2019t forget to include the session cookie\n  })\n  .then(function (response) {\n    if (response.ok) {\n      response.json().then((result) =  {\n        console.log(result);\n      });\n    } else {\n      throw new Error('Network response was not ok.');\n    }\n  })\n  .catch(function (error) {\n    console.log('There has been a problem with your fetch operation: ' + error.message);\n  });\n});", 
            "title": "Behind the magic"
        }, 
        {
            "location": "/dev/app/#the-manifest", 
            "text": "Each application must have a \u201cmanifest\u201d. It\u2019s a JSON file named  manifest.webapp  stored at the root of the application directory. It describes the application, the type of documents it uses, the permissions it require\u2026 Here\u2019s a sample manifest: {\n   name :  My Awesome application ,\n   permissions : {\n     apps : {\n       type :  io.cozy.apps \n    },\n     permissions : {\n       type :  io.cozy.permissions \n    },\n     settings : {\n       type :  io.cozy.settings \n    },\n     sample : {\n       type :  io.cozy.dev.sample ,\n       verbs : [ GET ,  POST ,  PUT ,  PATCH ,  DELETE ]\n    },\n     jobs : {\n       type :  io.cozy.jobs \n    }\n  },\n   routes : {\n     / : {\n       folder :  / ,\n       index :  index.html ,\n       public : false\n    },\n     /public : {\n       folder :  /public ,\n       index :  index.html ,\n       public : true\n    }\n  }\n}", 
            "title": "The manifest"
        }, 
        {
            "location": "/dev/app/#permissions", 
            "text": "Applications require permissions to use most of the APIs. Permissions can be described inside the manifest, so the server can ask the user to grant them during installation. Applications can also request permissions at run time. A permission must at type contain a target, the type of objects the application want to interact with. Can be a document type, or an action on the server. By default, all grant on this object are granted, but we can also request fine grained permissions, for example limiting to read access. We can also limit the scope to a subset of the documents. In the manifest, each permission is an object, with a random name and some properties:  type :  mandatory  the document type or action name; description : a text that will be displayed to the user to explain why the application require this permission; verbs : an array of HTTP verbs. For example, to limit permissions to read access, use  [ GET ] ; selector : a document attribute to limit access to a subset of documents; values : array of allowed values for this attribute.  An application can request a token that grant access to a subset of its own permissions. For example if the application has full access to the files, it can obtain a token that give only read access on a file. Thus, the application can make some documents publicly available. The public page of the application will use this token as authentication token when accessing the API.", 
            "title": "Permissions"
        }, 
        {
            "location": "/dev/app/#samples", 
            "text": "Application require full access to files: {\n   permissions : {\n     files : {\n       description :  \u2026 ,\n       type :  io.cozy.files \n    },\n  }\n}  Application want to be able to read the contact informations of  cozy@cozycloud.cc {\n   permissions : {\n     contact : {\n       type :  io.cozy.contacts ,\n       verbs : [ GET ],\n       selector :  email ,\n       values : [ cozy@cozycloud.cc ]\n    }\n  }\n}", 
            "title": "Samples"
        }, 
        {
            "location": "/dev/app/#routing", 
            "text": "The application must declare all of its URLs (routes) inside the manifest. A route is an object associating an URL to an HTML file. Each route has the following properties:  folder : the base folder of the route; index : the name of the file inside this folder; public : a boolean specifying whether the route is public or private (default).  Sample: routes : {\n   /admin : {\n     folder :  / ,\n     index :  admin.html ,\n     public : false\n  },\n   /public : {\n     folder :  /public ,\n     index :  index.html ,\n     public : true\n  },\n   /assets : {\n     folder :  /assets ,\n     public : true\n  }\n}", 
            "title": "Routing"
        }, 
        {
            "location": "/dev/app/#cozy-client-js", 
            "text": "This library embeds most of the available server APIs: manipulate documents and files, manage applications and server settings\u2026 It also provides some some methods to help application keep working while being offline. The library expose a client API under the  window.cozy.client  namespace. Before using it, you have to initiate the library with the server parameters (the URL of the API and the auth token of your application):   window.cozy.client.init({cozyURL:  \u2026 , token:  \u2026 });  The library supports two programming paradigms: callback and Promises, so you can use your favorite one. If you prefer using callbacks rather than Promises, just add  disablePromises  to the options when initializing the library:   window.cozy.client.init({cozyURL:  \u2026 , token:  \u2026 , disablePromises: true});\n  window.client.settings.diskUsage(function (err, res) {\n    (\u2026)\n  });", 
            "title": "cozy-client-js"
        }, 
        {
            "location": "/dev/app/#raw-api-documentation", 
            "text": "In this tutorial, we\u2019ll only see a few samples of how to use the library. For a complete description of all available methods, please refer to its own documentation:  documents ; files ; authentification ; authentication with OAuth2 ; settings ; inter-app communication ; jobs and triggers ; sharing ; offline ; Cozy Bar ;", 
            "title": "Raw API documentation"
        }, 
        {
            "location": "/dev/app/#manipulating-documents", 
            "text": "Inside cozy data system, all documents are typed. To prevent applications to create document types with the same name but different description, the naming of the doctypes use  the Java specification . Every document type name must be prefixed by the reverted domain name of its creator. If you don\u2019t own a domain name, you can also use your email address. For example, doctypes created by Cozy are prefixed by  io.cozy  or  io.cozy.labs . If you don\u2019t own a domain name, and your email address is  foo@bar.cloud , prefix your doctype names with  cloud.bar.foo . Before manipulating documents, you have to request permission to access their doctype, either in the manifest or dynamically. Every method allowing to handle document are available under the  cozy.client.data  namespace. For example:  cozy.client.data.create(doctype, attributes) ,  cozy.client.data.update(doctype, doc, newdoc) ,  cozy.client.data.delete(doctype, doc)  to create, update and delete documents; cozy.client.data.updateAttributes(doctype, id, changes)  to only update some attributes of a document; cozy.client.data.find(doctype, id)  return a document using its ident; cozy.client.data.changesFeed(doctype, options)  get the latests updates of documents of a doctype. you can attach files to a document using  cozy.client.data.addReferencedFiles(doc, fileIds)  and list attachments with  cozy.client.data.listReferencedFiles(doc) .", 
            "title": "Manipulating documents"
        }, 
        {
            "location": "/dev/app/#querying", 
            "text": "To search documents inside the database, you first need to create an index on some attributes of the documents, then perform a query on this index. The library offers the following methods:  cozy.client.data.defineIndex(doctype, fields)  to create the index; cozy.client.data.query(indexReference, query)  to query an index. The query parameter uses the syntax of the  Mango API  from CouchDB 2.  For example, to search contacts by their email address, you could use: cozy.client.data.defineIndex( io.cozy.contacts , [ email ])\n.then((index) =  {\n  return cozy.data.query(index, { selector : {email:  cozy@cozycloud.cc }})\n})\n.then( (result) =  {\n  console.log(result[0].name);\n});", 
            "title": "Querying"
        }, 
        {
            "location": "/dev/app/#manipulating-files", 
            "text": "The metadata of the files are stored inside the server database, allowing to perform advanced queries, and the files themselves on a virtual file system. The library offer a lot of methods under  cozy.client.files  namespace to manipulate files. Most of the methods allows to manipulate a file or folder either by its id or by its full path. Here are the most commons ones, but a lot of other methods are available in the  raw API documentation :  create()  and  updateById()  to create and update a file; createDirectory()  to create a folder; updateAttributesById()  et  updateAttributesByPath()  allow to update some metadata; use  destroyById  to remove a file; a virtual trash is available. You can put files into the trash ( trashById() ) and restore them ( restoreById() ). You can also list the content of the trash ( listTrash() ) and purge all trashed files ( clearTrash() ); statById(id)  et  statByPath(path)  return the metadata and, or folders, their content;", 
            "title": "Manipulating files"
        }, 
        {
            "location": "/dev/app/#folders", 
            "text": "When using  statById()  or  statByPath()  to get metadata of of folder, you can than call  relations()  on the resulting object to access their content. For example, to list content of the root folder, use: cozy.client.files.statByPath( / )\n.then((dir) =  {\n  console.log(dir.relations( contents ));\n})  Some special folder have a pre-defined id that will never change:  io.cozy.files.root-dir  is the root of the filesystem; io.cozy.files.trash-dir  is the trash.", 
            "title": "Folders"
        }, 
        {
            "location": "/dev/app/#the-cozy-bar", 
            "text": "The  Cozy Bar  is a component that display the Cozy menu on the top of your application and allow inter-apps features like content sharing. Your application interacts with this component through  cozy-bar.js , a library injected into your pages by the server when you add  {{.CozyBar}}  in the header. It exposes an API behind the window.cozy.bar namespace. Before using it, you have to initialize the library:  window.cozy.bar.init({appName:  Mon application }) .", 
            "title": "The Cozy Bar"
        }, 
        {
            "location": "/dev/app/#styling", 
            "text": "If you plan to build a webapp to run on Cozy, you\u2019ll probably want to use a simple and elegant solution to build your interfaces without the mess of dealing with complex markup and CSS. Then  Cozy UI  is here for you! It relies on Stylus as preprocessor. You can add it as a library in your project to use it out-of-the-box.", 
            "title": "Styling"
        }, 
        {
            "location": "/dev/app/#start-the-development-server", 
            "text": "Now it\u2019s time to start the development server, to test our application. (remember what we previously said about the permissions required to run Docker: if your user doesn\u2019t belong to the docker group, you\u2019ll have to use  sudo  to run each of this commands.) To run your application inside the development server, just run the following command from the folder where your  index.html  and  manifest.webapp  files leave: docker run --rm -it -p 8080:8080 -p 5984:5984 -p 8025:8025 -v $(pwd):/data/cozy-app --name cozydev cozy/cozy-app-dev  Let\u2019s have a quick look at this command, so you can adapt it to your needs:  rm  will delete the server when you stop it. This prevent Docker from keeping a lot of unused stopped images; -it  allow to attach an interactive terminal, so you\u2019ll be able to use the command line inside the server; -p 8080:8080 : the server listens on port 8080 on the virtual machine. We forward this port to the same port on your local machine. To use another local port, for example 9090, use  -p 9090:8080 ; -p 5984:5984 : this is just a convenient way to access the CouchDB database running inside the server. Point your browser to  http://cozy.tools:5984/_utils/  to access its administrative interface; -p 8025:8025 \u00a0: Cozy requires a mail server. In the development image, we don\u2019t use a real email server, but a software that can display the sent messages. Just point your browser to  http://cozy.tools:8025/  to display the messages sent by the server; -v $(pwd):/data/cozy-app  this mount the current folder, where your application leaves, inside the server. This is what make the application available on the server; name cozydev  name the running virtual machine  cozydev , so you can easily refer to it from other Docker commands. For example, if you want to connect to a shell inside the server, you can use  docker exec -ti /bin/bash .  With this syntax, there is no data persistance: all your test data will be lost every time you stop the server. This is a good way to prevent side effects and start on a clean base, with an empty database. However, if you want to persist data, you have to mount two folders from the virtual server to local folders:  /usr/local/couchdb/data  (database) and  /data/cozy-storage  (the virtual filesystem). This can be achieved by adding to the command line  -v ~/cozy/data/db:/usr/local/couchdb/data -v ~/cozy/data/storage:/data/cozy-storage  which will store the server\u2019s data into  ~/cozy/data . Once the server started, go to  http://app.cozy.tools:8080/# , connect to the server with the default password  cozy  and you should be able to start testing your application. You can also access the following URLs:  http://cozy.tools:5984/_utils  to get the database administrative panel; http://cozy.tools:8025/  to display the emails sent by the server.", 
            "title": "Start the development server"
        }, 
        {
            "location": "/dev/app/#test-multiple-applications", 
            "text": "You can install more than one application into the development server, for example to test communication between applications. In order to achieve this, you have to mount the folder where your application leaves into subfolders of  /data/cozy-apps . For example, if the code of Cozy Drive and Cozy Photos is on your local filesystem in  ~/cozy/drive  and  ~/cozy/photos , start the development server with: docker run --rm -it -p 8080:8080 -p 5984:5984 -p 8025:8025 -v  ~/cozy/drive :/data/cozy-app/drive  -v  ~/cozy/photos:/data-cozy-app/photos  --name=cozydev cozy/cozy-app-dev  You\u2019ll access the applications by connecting to  http://drive.cozy.tools:8080/  and  http://photos.cozy.tools:8080 .", 
            "title": "Test multiple applications"
        }, 
        {
            "location": "/dev/app/#todo", 
            "text": "Ce serveur de d\u00e9veloppement utilise les noms de domaine  *.cozy.tools . Nous avons param\u00e9tr\u00e9 ce domaine pour qu\u2019il pointe toujours vers  127.0.0.1 , l\u2019adresse de votre machine locale. La branche  sample  du d\u00e9p\u00f4t de cette documentation contient un squelette minimaliste avec les fichiers n\u00e9cessaires pour cr\u00e9er une application. Vous pouvez les r\u00e9cup\u00e9rer en faisant\u00a0: git clone -b sample https://github.com/cozy/cozy-docdev-v3.git myapp\ncd myapp", 
            "title": "TODO"
        }, 
        {
            "location": "/dev/konnector/", 
            "text": "How to write a connector\nIntroduction\nA connector is a small script that allows to import data from an external website. Each connector is an independent application, managed by the Cozy Collect application.\nTo protect your data, each connector runs inside a sandbox where all their interactions with your data are under control.\nFrom a technical point of view, connectors are Node.js applications executed inside a container. They communicate with the server using its API, like client side apps, and get an auth token every time they start. They need to register with a manifest, and ask permissions to the user.\nTo ease the development of a connector, an npm package, named \ncozy-connector-libs\n provides a lot of\nshared libraries. But you may need some other npm packages to help you running your connector: \n\n\ncheerio\n to manipulate the DOM on remote web pages\u00a0;\nmoment\n to manage dates\u00a0;\nrequest\n for fetching remote URLs\u00a0;\n\n\nWhen the application is started, it also gets some data through environment variables:\n\n\nCOZY_CREDENTIALS\n\u00a0: the auth token used by \n\ncozy-client-js\n to communicate with the server\u00a0;\nCOZY_URL\n\u00a0: the API entry point\u00a0;\nCOZY_FIELD\n\u00a0: the settings specific to each connector, for example the path of folder where the user wants to store the remote files\u00a0;\n\n\nBut the base connector (\nrequire(\ncozy-konnector-libs\n).baseKonnector\n) in cozy-konnector-libs handles these for you.\nThe application can access a temporary file system, deleted at the end of its execution. Its logs (standard and error output) are kept by the server.\nFrom the server point of view, each connector is a \njob\n run through a \n\ntrigger\n.\nLet\u2019s create our first connector\nThe easiest way to create a new connector is to use \nour template\n:\ngit clone https://github.com/cozy/cozy-konnector-template\ncd cozy-konnector-template\nyarn # or npm install\n\n\n\n\nnote: the Cozy Team uses \nyarn\n, but if you prefer \nnpm\n, just keep using it, everything should just work.\nThen, write your code into \nkonnectors.js\n and build the application, running \n\nyarn build\n or \n\nnpm run build\n.\nCollector structure\nBasically, a connector is just an object passed to baseKonnector.createNew:\n\n\nfetchOperations\n: array of methods that will be called sequentially to fetch the data;\n\n\nTo create the connector, just call \nbaseKonnector.createNew()\n from the Cozy Collector lib, with an object describing the connector:\nconst {baseKonnector, filterExisting, saveDataAndFile, models} = require(\ncozy-konnector-libs\n);\nconst Kitten = models.baseModel.createNew({\n  name: \nkitten\n\n});\n\nmodule.exports = baseKonnector.createNew({\n  name: \nkitten\n,\n  models: [],\n  fetchOperations: [\n    fetchKittens,\n    customFilterExisting,\n    customSaveDataAndFile\n  ]\n});\n\n\n\n\nFetch operations\nEvery time the connector is run, it will call every method from the \nfetchOperations\n array. Use this methods to log into the remote site, fetch data and save it.\nEach function must use the same signature: \nfunctionName(fields, bills, data, next)\n where:\n\n\nfields\n are the values of the optional configuration fields;\nentries\n is an object to pass data from one function to the next one;\ndata\n allows to pass raw data from one function to the next one;\nnext\n is a function to call to execute next function. One may pass an error as first argument. Don\u2019t forget to call it at the end of every step.\n\n\nA basic connector workflow involves:\n - getting data and storing them into \nentries.fetched\n. You can get the data by calling an API, scraping the remote website\u2026;\n - filtering data to remove the ones already present inside the database. The filtered data will be put into \n\nentries.filtered\n;\n - save the filtered data into the database.\nMany operations are common to most of the connectors, so we created some common functions you can import from the shared library. Most of the time, you\u2019ll just have to take care of fetching data, store them into \nentries.fetched\n then use the common methods to filter and save them.\nWe\u2019ll have a deeper look at this methods below.\nError handling\nIf your connector hit some issue fetching or saving the data, it can return an error code by passing it to the \nnext\n method. Some error code are defined inside the Cozy Collect application and will display an explicit error to the user:\n\n\nLOGIN_FAILED\n: the konnector could not login;\nNOT_EXISTING_DIRECTORY\n: the folder specified as folder_to_save does not exist (checked by base_konnector);\nUNKNOWN_ERROR\n: there was an unexpected error, please take a look at the logs to know what appened;\n\n\nKonnector lib\nThe Cozy Konnector Lib provide some useful methods for common tasks:\n\n\nbaseKonnector.createNew()\n: create the connector and fetch data;\ncozyClient\n gives an instance of cozy-client-js already initialized according to COZY_URL, and\n   COZY_CREDENTIALS\nfetcher\n is the internal class that run fetching operations in sequence, calling the functions with the right parameters;\nlog(type, message)\n allows to log messages;\nmanifest\n extracts informations from the manifest (mainly used internaly at the moment);\nnaming\n is a method allowing to build file names according to parameters;\nfilterExisting\n to filter data;\nlinkBankOperation\n to link a bill to a bank operation;\nsaveDataAndFile\n save the data;\nupdateOrCreate\n create or update documents inside database\n\n\nThere are also some models available in require(\ncozy-konnector-libs\n).models :\n\n\nbaseModel\n : which is a model from which your model can extend using it\ns \n\ncreateNew\n method.\n   It offers the \n\nall\n, \n\ncreate\n, and \n\nupdateAttributes\n methods already implemented.\nbill\n : Offers an already implemented model allowing to manipulate \nio.cozy.bills\n doctype. It is used by many connectors.\nfile\n : a helper to manipulate files\nfolder\n : a helper to manipulate folders\nbankOperation\n : a helper to manipulate bank operations\n\n\nCommon methods\n cozyClient() \nIf you want to access cozy-client-js directly, this method gives you directly an instance of it,\ninitialized according to COZY_URL and COZY_CREDENTIALS environment variable.\nYou can refer to the \ncozy-client-js documentation\n for more information.\nconst {clientClient} = require('cozy-konnector-libs')\n\ncozyClient.data.defineIndex('my.doctype', ['_id'])\n\n\n\n\n filterExisting(log, model, suffix, vendor) \nThis method returns a fetch function that filter data fetched from the remote site to only keep the ones that don\u2019t exist in database. The fetched data are expected to be in the \nentries.fetched\n array. The resulting array will be put into \n\nentries.filtered\nParameters:\n\n\nlog\n: unused (kept for retro-compatibility);\nmodel\n: the model;\nsuffix\n: unused (kept for retro-compatibility);\nvendor\n: if a vendor parameter is given, entry should be of given vendor to be added to the hash (useful for bills).\n\n\nkonnector.fetchOperations = [ (\u2026), customFilterExisting, (\u2026) ];\n\nfunction customFilterExisting(requiredFields, entries, data, next) {\n  filterExisting(myKonnector.logger, Bill) (requiredFields, entries, data, next);\n}\n\n\n\n\n saveDataAndFile(logger, model, options, tags) \nThis method returns a fetch function that creates an object in database for each item in \nentries.filtered\n array. If item has a \n\npdfurl\n attribute, the remote file will be downloaded and stored on the filesystem. \n\npdfUrl\n can point to any file, not necessarily a PDF file. The name comes from legacy code and has not been updated.\nParameters:\n\n\nlog\n: unused (kept for retro-compatibility);\nmodel\n: the model;\noptions\n:\ntags\n: array of tags to apply to created files.\n\n\n updateOrCreate(logger, model, filter, options)` \nThis method return a fetch function that creates or updates an object in database for each item in the \nentries[model.displayName]\n array. The filter parameters specifies the fields used to find the document inside the database.\nParameters:\n\n\nlog\n: unused (kept for retro-compatibility);\nmodel\n: the model;\nfilters\n: an array of fields names;\ntags\n: array of tags to apply to created files.\n\n\n linkBankOperation \nThis method returns a fetch function that will try to link a bill to a bank operation. For each data item from \nentries.fetched\n, it will look for an operation that could match this entry. Once found, it attaches a binary to the bank operation. It\u2019s the same binary that is attached to the corresponding file object.\nThe criteria to find a matching operation are:\n\n\nOperation label should contain one of the identifiers given in parameter;\nThe date should be between (bill date - \ndateDelta\n) and (bill date + \n\ndateDelta\n). Where \n\ndateDelta\n is given as a parameter and is in days;\nThe amount should be between (bill amount - \namountDelta\n) and (bill amount + \n\namountDelta\n). Where \n\namountDelta\n is given as a parameter.\n\n\nParameters:\nYou should pass parameters as an object whose keys are:\n\n\nlog\n: unused (kept for retro-compatibility);\nmodel\n: a model object to check for.\nidentifier\n: a string or an array of strings to look for in the operation label (case insensitive: the layer will automatically set it to lowercase).\ndateDelta\n: the number of days allowed between the bank operation date and the bill date  (15 by default). \namountDelta\n: the difference between the bank operation amount and the bill amount (useful when the currency is not the same) (0 by default).\nisRefund\n: boolean telling if the operation is a refund or not. By default, it is \n\nfalse\n. Allows to match only operations with positive amount if set to \n\ntrue\n.\n\n\nCommon data models\nThe library includes the most used data model, so you can just require them if you need them:\n\n\nbankOperation\nbill\nfile\nfolder\n\n\nThe library also provide a \nbaseModel\n class to create your own data model. Each model inherits from the following methods:\n\n\nall(callback)\n fetch all documents;\ncreate(entry, callback)\n creates a new document;\nupdateAttributes(id, changes, callback)\n update the attributes of a document.\n\n\nconst { models: { baseModel } } = require(\u2019cozy-konnector-libs\u2019)\n\nmodule.exports = baseModel.createNew({\n    displayName: \nmyModel\n,\n    name: \nme.cozy.mymodel\n\n});\n\n\n\n\nThe manifest\nEach connector is described by a Manifest. This is a JSON file named \nmanifest.konnector\n at the root of your code folder. It should include the following information:\n\n\nname\n: \u2026\nslug\n: the internal name of the application;\ntype\n: for now, the only allowed value is \n\nnode\n. In the future, we may support other types of connectors;\nversion\n: \nsource\n: git URL of the source code repository;\nfields\n: @TODO\nlocales\n: @TODO\npermissions\n: an object describing the permissions the connector requires;\ndeveloper\n: who are you?\nname\n: \nurl\n: \n\n\nPermissions\nTODO See documentation of the manifest of an application\nThe connector parameters are stored in \nio.cozy.accounts\n documents, so each connector should get access to this doctype.\nFAQ\nHow do I scrap a website\nYou will require the \nrequest\n and \n\ncheerio\n npm packages:\nyarn add cheerio request # or npm install --save cheerio request\n\n\n\n\nHere\u2019s a sample code that will fetch the login page to get the value of the anti-CSRF token, submit the login form, browse to the bills page and fetch a bill:\nfunction fetchBill(requiredFields, entries, data, next) {\n  'use strict';\n  next();\n  // Create a request instance that keep cookies between requests and follow redirects\n  let request = require('request').defaults({jar: true, followRedirect: true, followAllRedirects: true}),\n      cheerio = require('cheerio'),\n      moment  = require('moment');\n  // Get the login page to get the CSRF token\n  request(\nhttps://login.remote.web\n, function (err, res, html) {\n    if (err) {\n      return next(err.message);\n    }\n    // Post the form\n    let $ = cheerio.load(html),\n        form = {\n          form: {\n            login: requiredFields.login,\n            password: requiredFields.password,\n            csrf_token: $('[name=\ncsrf_token\n]').val(),\n          }\n        };\n    request.post('https://login.remote.web', form, function (err, res, html) {\n      if (err) {\n        return next(err.message);\n      }\n      request(\nhttps://admin.remote.web/bills\n, function (err, res, html) {\n        if (err) {\n          return next(err.message);\n        }\n        entries.fetched = [{date: moment($(\nbill_date\n)), value: $(\n#bill_value\n)}];\n        next();\n      });\n    });\n  });\n}\n\n\n\n\nThe whole connector will be as simple as:\nconst {baseKonnector, filterExisting, saveDataAndFile, models} = require(\ncozy-konnector-libs\n),\n      MyBills = models.baseModel.createNew({\n          name: \nme.mycozy.mybill\n\n      });\n\nfunction fetchBill(requiredFields, entries, data, next) {\n  (\u2026);\n}\n\nmodule.exports = baseKonnector.createNew({\n  name: 'me.mycozy.mybill',\n  fetchOperations: [\n    fetchBill,\n    filterExisting(null, MyBills),\n    saveDataAndFile(null, MyBills, {})\n  ]\n});\n\n\n\n\nTesting\nRunning in standalone mode\nTo ease the development, you don\u2019t need a running Cozy server to test your code. We provide a standalone mode, that mocks the server. This mode uses a configuration file to define the environment variables that the server will send to your application in production. So, start by copying \ndata/env_fields.json.template\n to \n\ndata/env_fields.json\n and set the parameters your application requires. Then start it with \n\nyarn standalone\n or \n\nnpm run standalone\n.\nIn standalone mode, saving a file will put it into the \ndata\n folder at the root of your repository. If you need to query the database, put your mock data into \n\ndata/fixture.json\n. Also, fetched data will just be outputted to the console instead of being sent to the database.", 
            "title": "Develop a connector"
        }, 
        {
            "location": "/dev/konnector/#how-to-write-a-connector", 
            "text": "", 
            "title": "How to write a connector"
        }, 
        {
            "location": "/dev/konnector/#introduction", 
            "text": "A connector is a small script that allows to import data from an external website. Each connector is an independent application, managed by the Cozy Collect application. To protect your data, each connector runs inside a sandbox where all their interactions with your data are under control. From a technical point of view, connectors are Node.js applications executed inside a container. They communicate with the server using its API, like client side apps, and get an auth token every time they start. They need to register with a manifest, and ask permissions to the user. To ease the development of a connector, an npm package, named  cozy-connector-libs  provides a lot of\nshared libraries. But you may need some other npm packages to help you running your connector:   cheerio  to manipulate the DOM on remote web pages\u00a0; moment  to manage dates\u00a0; request  for fetching remote URLs\u00a0;  When the application is started, it also gets some data through environment variables:  COZY_CREDENTIALS \u00a0: the auth token used by  cozy-client-js  to communicate with the server\u00a0; COZY_URL \u00a0: the API entry point\u00a0; COZY_FIELD \u00a0: the settings specific to each connector, for example the path of folder where the user wants to store the remote files\u00a0;  But the base connector ( require( cozy-konnector-libs ).baseKonnector ) in cozy-konnector-libs handles these for you. The application can access a temporary file system, deleted at the end of its execution. Its logs (standard and error output) are kept by the server. From the server point of view, each connector is a  job  run through a  trigger .", 
            "title": "Introduction"
        }, 
        {
            "location": "/dev/konnector/#lets-create-our-first-connector", 
            "text": "The easiest way to create a new connector is to use  our template : git clone https://github.com/cozy/cozy-konnector-template\ncd cozy-konnector-template\nyarn # or npm install  note: the Cozy Team uses  yarn , but if you prefer  npm , just keep using it, everything should just work. Then, write your code into  konnectors.js  and build the application, running  yarn build  or  npm run build .", 
            "title": "Let\u2019s create our first connector"
        }, 
        {
            "location": "/dev/konnector/#collector-structure", 
            "text": "Basically, a connector is just an object passed to baseKonnector.createNew:  fetchOperations : array of methods that will be called sequentially to fetch the data;  To create the connector, just call  baseKonnector.createNew()  from the Cozy Collector lib, with an object describing the connector: const {baseKonnector, filterExisting, saveDataAndFile, models} = require( cozy-konnector-libs );\nconst Kitten = models.baseModel.createNew({\n  name:  kitten \n});\n\nmodule.exports = baseKonnector.createNew({\n  name:  kitten ,\n  models: [],\n  fetchOperations: [\n    fetchKittens,\n    customFilterExisting,\n    customSaveDataAndFile\n  ]\n});", 
            "title": "Collector structure"
        }, 
        {
            "location": "/dev/konnector/#fetch-operations", 
            "text": "Every time the connector is run, it will call every method from the  fetchOperations  array. Use this methods to log into the remote site, fetch data and save it. Each function must use the same signature:  functionName(fields, bills, data, next)  where:  fields  are the values of the optional configuration fields; entries  is an object to pass data from one function to the next one; data  allows to pass raw data from one function to the next one; next  is a function to call to execute next function. One may pass an error as first argument. Don\u2019t forget to call it at the end of every step.  A basic connector workflow involves:\n - getting data and storing them into  entries.fetched . You can get the data by calling an API, scraping the remote website\u2026;\n - filtering data to remove the ones already present inside the database. The filtered data will be put into  entries.filtered ;\n - save the filtered data into the database. Many operations are common to most of the connectors, so we created some common functions you can import from the shared library. Most of the time, you\u2019ll just have to take care of fetching data, store them into  entries.fetched  then use the common methods to filter and save them. We\u2019ll have a deeper look at this methods below.", 
            "title": "Fetch operations"
        }, 
        {
            "location": "/dev/konnector/#error-handling", 
            "text": "If your connector hit some issue fetching or saving the data, it can return an error code by passing it to the  next  method. Some error code are defined inside the Cozy Collect application and will display an explicit error to the user:  LOGIN_FAILED : the konnector could not login; NOT_EXISTING_DIRECTORY : the folder specified as folder_to_save does not exist (checked by base_konnector); UNKNOWN_ERROR : there was an unexpected error, please take a look at the logs to know what appened;", 
            "title": "Error handling"
        }, 
        {
            "location": "/dev/konnector/#konnector-lib", 
            "text": "The Cozy Konnector Lib provide some useful methods for common tasks:  baseKonnector.createNew() : create the connector and fetch data; cozyClient  gives an instance of cozy-client-js already initialized according to COZY_URL, and\n   COZY_CREDENTIALS fetcher  is the internal class that run fetching operations in sequence, calling the functions with the right parameters; log(type, message)  allows to log messages; manifest  extracts informations from the manifest (mainly used internaly at the moment); naming  is a method allowing to build file names according to parameters; filterExisting  to filter data; linkBankOperation  to link a bill to a bank operation; saveDataAndFile  save the data; updateOrCreate  create or update documents inside database  There are also some models available in require( cozy-konnector-libs ).models :  baseModel  : which is a model from which your model can extend using it s  createNew  method.\n   It offers the  all ,  create , and  updateAttributes  methods already implemented. bill  : Offers an already implemented model allowing to manipulate  io.cozy.bills  doctype. It is used by many connectors. file  : a helper to manipulate files folder  : a helper to manipulate folders bankOperation  : a helper to manipulate bank operations", 
            "title": "Konnector lib"
        }, 
        {
            "location": "/dev/konnector/#common-methods", 
            "text": "cozyClient()  If you want to access cozy-client-js directly, this method gives you directly an instance of it,\ninitialized according to COZY_URL and COZY_CREDENTIALS environment variable.\nYou can refer to the  cozy-client-js documentation  for more information. const {clientClient} = require('cozy-konnector-libs')\n\ncozyClient.data.defineIndex('my.doctype', ['_id'])   filterExisting(log, model, suffix, vendor)  This method returns a fetch function that filter data fetched from the remote site to only keep the ones that don\u2019t exist in database. The fetched data are expected to be in the  entries.fetched  array. The resulting array will be put into  entries.filtered Parameters:  log : unused (kept for retro-compatibility); model : the model; suffix : unused (kept for retro-compatibility); vendor : if a vendor parameter is given, entry should be of given vendor to be added to the hash (useful for bills).  konnector.fetchOperations = [ (\u2026), customFilterExisting, (\u2026) ];\n\nfunction customFilterExisting(requiredFields, entries, data, next) {\n  filterExisting(myKonnector.logger, Bill) (requiredFields, entries, data, next);\n}   saveDataAndFile(logger, model, options, tags)  This method returns a fetch function that creates an object in database for each item in  entries.filtered  array. If item has a  pdfurl  attribute, the remote file will be downloaded and stored on the filesystem.  pdfUrl  can point to any file, not necessarily a PDF file. The name comes from legacy code and has not been updated. Parameters:  log : unused (kept for retro-compatibility); model : the model; options : tags : array of tags to apply to created files.   updateOrCreate(logger, model, filter, options)`  This method return a fetch function that creates or updates an object in database for each item in the  entries[model.displayName]  array. The filter parameters specifies the fields used to find the document inside the database. Parameters:  log : unused (kept for retro-compatibility); model : the model; filters : an array of fields names; tags : array of tags to apply to created files.   linkBankOperation  This method returns a fetch function that will try to link a bill to a bank operation. For each data item from  entries.fetched , it will look for an operation that could match this entry. Once found, it attaches a binary to the bank operation. It\u2019s the same binary that is attached to the corresponding file object. The criteria to find a matching operation are:  Operation label should contain one of the identifiers given in parameter; The date should be between (bill date -  dateDelta ) and (bill date +  dateDelta ). Where  dateDelta  is given as a parameter and is in days; The amount should be between (bill amount -  amountDelta ) and (bill amount +  amountDelta ). Where  amountDelta  is given as a parameter.  Parameters: You should pass parameters as an object whose keys are:  log : unused (kept for retro-compatibility); model : a model object to check for. identifier : a string or an array of strings to look for in the operation label (case insensitive: the layer will automatically set it to lowercase). dateDelta : the number of days allowed between the bank operation date and the bill date  (15 by default).  amountDelta : the difference between the bank operation amount and the bill amount (useful when the currency is not the same) (0 by default). isRefund : boolean telling if the operation is a refund or not. By default, it is  false . Allows to match only operations with positive amount if set to  true .", 
            "title": "Common methods"
        }, 
        {
            "location": "/dev/konnector/#common-data-models", 
            "text": "The library includes the most used data model, so you can just require them if you need them:  bankOperation bill file folder  The library also provide a  baseModel  class to create your own data model. Each model inherits from the following methods:  all(callback)  fetch all documents; create(entry, callback)  creates a new document; updateAttributes(id, changes, callback)  update the attributes of a document.  const { models: { baseModel } } = require(\u2019cozy-konnector-libs\u2019)\n\nmodule.exports = baseModel.createNew({\n    displayName:  myModel ,\n    name:  me.cozy.mymodel \n});", 
            "title": "Common data models"
        }, 
        {
            "location": "/dev/konnector/#the-manifest", 
            "text": "Each connector is described by a Manifest. This is a JSON file named  manifest.konnector  at the root of your code folder. It should include the following information:  name : \u2026 slug : the internal name of the application; type : for now, the only allowed value is  node . In the future, we may support other types of connectors; version :  source : git URL of the source code repository; fields : @TODO locales : @TODO permissions : an object describing the permissions the connector requires; developer : who are you? name :  url :", 
            "title": "The manifest"
        }, 
        {
            "location": "/dev/konnector/#permissions", 
            "text": "TODO See documentation of the manifest of an application The connector parameters are stored in  io.cozy.accounts  documents, so each connector should get access to this doctype.", 
            "title": "Permissions"
        }, 
        {
            "location": "/dev/konnector/#faq", 
            "text": "", 
            "title": "FAQ"
        }, 
        {
            "location": "/dev/konnector/#how-do-i-scrap-a-website", 
            "text": "You will require the  request  and  cheerio  npm packages: yarn add cheerio request # or npm install --save cheerio request  Here\u2019s a sample code that will fetch the login page to get the value of the anti-CSRF token, submit the login form, browse to the bills page and fetch a bill: function fetchBill(requiredFields, entries, data, next) {\n  'use strict';\n  next();\n  // Create a request instance that keep cookies between requests and follow redirects\n  let request = require('request').defaults({jar: true, followRedirect: true, followAllRedirects: true}),\n      cheerio = require('cheerio'),\n      moment  = require('moment');\n  // Get the login page to get the CSRF token\n  request( https://login.remote.web , function (err, res, html) {\n    if (err) {\n      return next(err.message);\n    }\n    // Post the form\n    let $ = cheerio.load(html),\n        form = {\n          form: {\n            login: requiredFields.login,\n            password: requiredFields.password,\n            csrf_token: $('[name= csrf_token ]').val(),\n          }\n        };\n    request.post('https://login.remote.web', form, function (err, res, html) {\n      if (err) {\n        return next(err.message);\n      }\n      request( https://admin.remote.web/bills , function (err, res, html) {\n        if (err) {\n          return next(err.message);\n        }\n        entries.fetched = [{date: moment($( bill_date )), value: $( #bill_value )}];\n        next();\n      });\n    });\n  });\n}  The whole connector will be as simple as: const {baseKonnector, filterExisting, saveDataAndFile, models} = require( cozy-konnector-libs ),\n      MyBills = models.baseModel.createNew({\n          name:  me.mycozy.mybill \n      });\n\nfunction fetchBill(requiredFields, entries, data, next) {\n  (\u2026);\n}\n\nmodule.exports = baseKonnector.createNew({\n  name: 'me.mycozy.mybill',\n  fetchOperations: [\n    fetchBill,\n    filterExisting(null, MyBills),\n    saveDataAndFile(null, MyBills, {})\n  ]\n});", 
            "title": "How do I scrap a website"
        }, 
        {
            "location": "/dev/konnector/#testing", 
            "text": "", 
            "title": "Testing"
        }, 
        {
            "location": "/dev/konnector/#running-in-standalone-mode", 
            "text": "To ease the development, you don\u2019t need a running Cozy server to test your code. We provide a standalone mode, that mocks the server. This mode uses a configuration file to define the environment variables that the server will send to your application in production. So, start by copying  data/env_fields.json.template  to  data/env_fields.json  and set the parameters your application requires. Then start it with  yarn standalone  or  npm run standalone . In standalone mode, saving a file will put it into the  data  folder at the root of your repository. If you need to query the database, put your mock data into  data/fixture.json . Also, fetched data will just be outputted to the console instead of being sent to the database.", 
            "title": "Running in standalone mode"
        }
    ]
}